package service.wrapper;

import org.fisco.bcos.sdk.abi.FunctionEncoder;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.*;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple5;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.eventsub.EventCallback;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

@SuppressWarnings("all")
public class NftMarket extends Contract {
    public static final String[] BINARY_ARRAY = {"","","","ffffffffffffffff81118282101715612f0757600080fd5b604052919050565b600067ffffffffffffffff821115612f25578081fd5b5060209081020190565b600067ffffffffffffffff821115612f45578081fd5b50601f01601f191660200190565b60005b83811015612f6e578181015183820152602001612f56565b83811115612f7d576000848401525b50505050565b60e01c90565b600060443d1015612f995761046e565b600481823e6308c379a0612fad8251612f83565b14612fb75761046e565b6040513d600319016004823e80513d67ffffffffffffffff8160248401118184111715612fe7575050505061046e565b82840191508151925080831115613001575050505061046e565b503d830160208383010111156130195750505061046e565b601f91909101601f1916810160200160405291505090565b6001600160a01b038116811461304657600080fd5b50565b801515811461304657600080fd5b6001600160e01b03198116811461304657600080fdfea264697066735822122098877894fb7806a6b4c09cf55473d20c26e0b63173331edd300d2d0af2fe820c64736f6c634300060a0033"};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"","600160a01b0390911690636c2eed0390610f0d908590600401612df6565b60006040518083038186803b158015610f2557600080fd5b505afa158015610f39573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610f6191908101906126ba565b90508060600151610f8557604051636381e58960e11b815260040161038290612bfe565b610fb1610f906114a8565b826040015160008460200151604051806020016040528060008152506109f2565b610fd98160400151610fc16114a8565b846001604051806020016040528060008152506109f2565b610fe16114a8565b6001600160a01b0390811660408084019190915260005481516060810190925242825290911690639256e0759084906020810161101c6114a8565b6001600160a01b031681526020016040518060400160405280601481526020017303a3930b232b2103132b4b73390309034ba32b6960651b8152508152506040518363ffffffff1660e01b8152600401611077929190612e82565b600060405180830381600087803b15801561109157600080fd5b505af11580156110a5573d6000803e3d6000fd5b5050600054604051633520bd5960e21b81526001600160a01b03909116925063d482f56491506110db9085908590600401612e9b565b600060405180830381600087803b1580156110f557600080fd5b505af1158015611109573d6000803e3d6000fd5b505050505050565b600054604051636c2eed0360e01b815260609182916001600160a01b0390911690636c2eed0390611146908690600401612df6565b60006040518083038186803b15801561115e57600080fd5b505afa158015611172573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261119a91908101906126ba565b519392505050565b6111aa612104565b600054604051630a0379a160e01b81526001600160a01b0390911690630a0379a1906111da908690600401612df6565b60a06040518083038186803b1580156111f257600080fd5b505afa158015611206573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061122a919061265a565b90508060200151421061125057604051636381e58960e11b815260040161038290612d22565b8060600151821161127457604051636381e58960e11b815260040161038290612c6a565b606081018290526112836114a8565b6001600160a01b0390811660808301526000546040516392bdfb8560e01b81529116906392bdfb8590610dd09086908590600401612e35565b60006001600160e01b03198216630c99ed1560e11b14806112ed57506001600160e01b0319821663e5e9be2d60e01b145b8061065a575061065a82611ebe565b611304612145565b600054604051636c2eed0360e01b81526001600160a01b0390911690636c2eed0390611334908690600401612df6565b60006040518083038186803b15801561134c57600080fd5b505afa158015611360573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261138891908101906126ba565b90506113ae6113956114a8565b83856001604051806020016040528060008152506109f2565b6001600160a01b0380831660408084019190915260005481516060810190925242825290911690639256e075908590602081016113e96114a8565b6001600160a01b0316815260200160405180604001604052806014815260200173039b2b73232b2103132b4b73390309033b4b33a160651b8152508152506040518363ffffffff1660e01b8152600401611444929190612e82565b600060405180830381600087803b15801561145e57600080fd5b505af1158015611472573d6000803e3d6000fd5b5050600054604051633520bd5960e21b81526001600160a01b03909116925063d482f5649150610dd09086908590600401612e9b565b3390565b6001600160a01b0384166114d357604051636381e58960e11b815260040161038290612d45565b6004805460008054604051635ba2370960e11b81526001600160a01b039384169492939091169163b7446e129161150e918991879101612dff565b60206040518083038186803b15801561152657600080fd5b505afa15801561153a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061155e9190612770565b600054604051635f32a7a160e01b81529192506001600160a01b031690635f32a7a190611595908890869089870190600401612e16565b600060405180830381600087803b1580156115af57600080fd5b505af11580156115c3573d6000803e3d6000fd5b5050505060606115d286611ed7565b905060606115df86611ed7565b90506115f08460008a85858a611109565b60008054604051635ba2370960e11b81526001600160a01b039091169063b7446e1290611623908b908d90600401612dff565b60206040518083038186803b15801561163b57600080fd5b505afa15801561164f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116739190612770565b600054604051635f32a7a160e01b81529192506001600160a01b031690635f32a7a1906116aa908b908d908c870190600401612e16565b600060405180830381600087803b1580156116c457600080fd5b505af11580156116d8573d6000803e3d6000fd5b50505050886001600160a01b031660006001600160a01b0316866001600160a01b03167f45602168d5eab1690a00c497b82a7da906ba3cd28c97cbaedc9e98dd1ef7d8248b8b60405161172c929190612ef1565b60405180910390a46117438560008b86868b611109565b6109e78560008b8b8b8b611f1b565b816001600160a01b0316836001600160a01b0316141561178557604051636381e58960e11b815260040161038290612c21565b6000546040516324bd9b2b60e21b81526001600160a01b03909116906392f66cac906117b99086908690869060040161291b565b600060405180830381600087803b1580156117d357600080fd5b505af11580156117e7573d6000803e3d6000fd5b50505050816001600160a01b0316836001600160a01b03167f34cc9ec6b85c217ac6bd5f7b86411e4e4e40d816d5d17725c4dec1f0901d90748360405161182e9190612a25565b60405180910390a3505050565b815183511461185d57604051636381e58960e11b815260040161038290612afb565b6001600160a01b03841661188457604051636381e58960e11b815260040161038290612b97565b6004546001600160a01b031661189e818787878787611109565b60005b8451811015611ae95760008582815181106118b857fe5b6020026020010151905060008583815181106118d057fe5b602090810291909101015160008054604051635ba2370960e11b815292935090916001600160a01b039091169063b7446e12906119139086908e90600401612dff565b60206040518083038186803b15801561192b57600080fd5b505afa15801561193f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119639190612770565b90508181101561198657604051636381e58960e11b815260040161038290612dac565b600054604051635f32a7a160e01b81526001600160a01b0390911690635f32a7a1906119bc9086908e9087870390600401612e16565b600060405180830381600087803b1580156119d657600080fd5b505af11580156119ea573d6000803e3d6000fd5b505060008054604051635ba2370960e11b81529193506001600160a01b0316915063b7446e1290611a219087908e90600401612dff565b60206040518083038186803b158015611a3957600080fd5b505afa158015611a4d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a719190612770565b600054604051635f32a7a160e01b81529192506001600160a01b031690635f32a7a190611aa89087908e9088870190600401612e16565b600060405180830381600087803b158015611ac257600080fd5b505af1158015611ad6573d6000803e3d6000fd5b50505050505050508060010190506118a1565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167ff36dc76d22baee5b32a2b0ac36d8c4808a08617e18e7e917f723d32db22a7a138787604051611b399291906129f7565b60405180910390a4611b4f818787878787611109565b61110981878787878761202c565b6001600160a01b038416611b8457604051636381e58960e11b815260040161038290612b97565b6004546001600160a01b03166060611b9b85611ed7565b90506060611ba885611ed7565b9050611bb8838989858589611109565b60008054604051635ba2370960e11b81526001600160a01b039091169063b7446e1290611beb908a908d90600401612dff565b60206040518083038186803b158015611c0357600080fd5b505afa158015611c17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c3b9190612770565b905085811015611c5e57604051636381e58960e11b815260040161038290612dac565b600054604051635f32a7a160e01b81526001600160a01b0390911690635f32a7a190611c94908a908d908b870390600401612e16565b600060405180830381600087803b158015611cae57600080fd5b505af1158015611cc2573d6000803e3d6000fd5b505060008054604051635ba2370960e11b81529193506001600160a01b0316915063b7446e1290611cf9908b908d90600401612dff565b60206040518083038186803b158015611d1157600080fd5b505afa158015611d25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d499190612770565b600054604051635f32a7a160e01b81529192506001600160a01b031690635f32a7a190611d80908b908d908c870190600401612e16565b600060405180830381600087803b158015611d9a57600080fd5b505af1158015611dae573d6000803e3d6000fd5b50505050886001600160a01b03168a6001600160a01b0316866001600160a01b03167f45602168d5eab1690a00c497b82a7da906ba3cd28c97cbaedc9e98dd1ef7d8248b8b604051611e01929190612ef1565b60405180910390a4611e17858b8b87878b611109565b611e25858b8b8b8b8b611f1b565b50505050505050505050565b6000805460408051608081018252858152602081018790526001600160a01b038581168284015260608201949094529051633520bd5960e21b8152929091169163d482f56491611e8691889190600401612e9b565b600060405180830381600087803b158015611ea057600080fd5b505af1158015611eb4573d6000803e3d6000fd5b5050505050505050565b6001600160e01b03198116631d4fd6f360e31b14919050565b604080516001808252818301909252606091829190602080","","565b918252602082015260400190565b60405181810167ffffffffffffffff81118282101715612f1e57600080fd5b604052919050565b600067ffffffffffffffff821115612f3c578081fd5b5060209081020190565b600067ffffffffffffffff821115612f5c578081fd5b50601f01601f191660200190565b60005b83811015612f85578181015183820152602001612f6d565b83811115612f94576000848401525b50505050565b60e01c90565b600060443d1015612fb057610cc8565b600481823e63c703cb12612fc48251612f9a565b14612fce57610cc8565b6040513d600319016004823e80513d67ffffffffffffffff8160248401118184111715612ffe5750505050610cc8565b828401915081519250808311156130185750505050610cc8565b503d8301602083830101111561303057505050610cc8565b601f91909101601f1916810160200160405291505090565b6001600160a01b038116811461305d57600080fd5b50565b801515811461305d57600080fd5b6001600160e01b03198116811461305d57600080fdfea2646970667358221220efa131295092229d4300da18969559f1701425995ee2bad32eec22ab5c89f0f264736f6c634300060a0033"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sto\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ver\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"auctionBegin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"auctionEnd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"auctionNft\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"buyNft\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getNftLife\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"status\",\"type\":\"string\"}],\"internalType\":\"struct NftStorage.ItemLife[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"token_url\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"issueNft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"regiter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"tranferNft\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"choice\",\"type\":\"bool\"}],\"name\":\"upOrDown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC__IMPLEMENTATION = "_implementation";

    public static final String FUNC_AUCTIONBEGIN = "auctionBegin";

    public static final String FUNC_AUCTIONEND = "auctionEnd";

    public static final String FUNC_AUCTIONNFT = "auctionNft";

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_BALANCEOFBATCH = "balanceOfBatch";

    public static final String FUNC_BUYNFT = "buyNft";

    public static final String FUNC_GETBALANCE = "getBalance";

    public static final String FUNC_GETNFTLIFE = "getNftLife";

    public static final String FUNC_ISAPPROVEDFORALL = "isApprovedForAll";

    public static final String FUNC_ISSUENFT = "issueNft";

    public static final String FUNC_REGITER = "regiter";

    public static final String FUNC_SAFEBATCHTRANSFERFROM = "safeBatchTransferFrom";

    public static final String FUNC_SAFETRANSFERFROM = "safeTransferFrom";

    public static final String FUNC_SETAPPROVALFORALL = "setApprovalForAll";

    public static final String FUNC_SUPPORTSINTERFACE = "supportsInterface";

    public static final String FUNC_TRANFERNFT = "tranferNft";

    public static final String FUNC_UPORDOWN = "upOrDown";

    public static final String FUNC_URI = "uri";

    public static final Event APPROVALFORALL_EVENT = new Event("ApprovalForAll", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Bool>() {}));
    ;

    public static final Event TRANSFERBATCH_EVENT = new Event("TransferBatch", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
    ;

    public static final Event TRANSFERSINGLE_EVENT = new Event("TransferSingle", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event URI_EVENT = new Event("URI", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>(true) {}));
    ;

    protected NftMarket(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public List<ApprovalForAllEventResponse> getApprovalForAllEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVALFORALL_EVENT, transactionReceipt);
        ArrayList<ApprovalForAllEventResponse> responses = new ArrayList<ApprovalForAllEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeApprovalForAllEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(APPROVALFORALL_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeApprovalForAllEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(APPROVALFORALL_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<TransferBatchEventResponse> getTransferBatchEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFERBATCH_EVENT, transactionReceipt);
        ArrayList<TransferBatchEventResponse> responses = new ArrayList<TransferBatchEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            TransferBatchEventResponse typedResponse = new TransferBatchEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.from = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.ids = (List<BigInteger>) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.values = (List<BigInteger>) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeTransferBatchEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(TRANSFERBATCH_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeTransferBatchEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(TRANSFERBATCH_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<TransferSingleEventResponse> getTransferSingleEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFERSINGLE_EVENT, transactionReceipt);
        ArrayList<TransferSingleEventResponse> responses = new ArrayList<TransferSingleEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            TransferSingleEventResponse typedResponse = new TransferSingleEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.from = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeTransferSingleEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(TRANSFERSINGLE_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeTransferSingleEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(TRANSFERSINGLE_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<URIEventResponse> getURIEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(URI_EVENT, transactionReceipt);
        ArrayList<URIEventResponse> responses = new ArrayList<URIEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            URIEventResponse typedResponse = new URIEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.value = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeURIEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(URI_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeURIEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(URI_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public String _implementation() throws ContractException {
        final Function function = new Function(FUNC__IMPLEMENTATION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt auctionBegin(BigInteger id) {
        final Function function = new Function(
                FUNC_AUCTIONBEGIN, 
                Arrays.<Type>asList(new Uint256(id)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] auctionBegin(BigInteger id, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_AUCTIONBEGIN, 
                Arrays.<Type>asList(new Uint256(id)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAuctionBegin(BigInteger id) {
        final Function function = new Function(
                FUNC_AUCTIONBEGIN, 
                Arrays.<Type>asList(new Uint256(id)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getAuctionBeginInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_AUCTIONBEGIN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt auctionEnd(BigInteger id) {
        final Function function = new Function(
                FUNC_AUCTIONEND, 
                Arrays.<Type>asList(new Uint256(id)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] auctionEnd(BigInteger id, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_AUCTIONEND, 
                Arrays.<Type>asList(new Uint256(id)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAuctionEnd(BigInteger id) {
        final Function function = new Function(
                FUNC_AUCTIONEND, 
                Arrays.<Type>asList(new Uint256(id)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getAuctionEndInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_AUCTIONEND, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt auctionNft(BigInteger id, BigInteger amount) {
        final Function function = new Function(
                FUNC_AUCTIONNFT, 
                Arrays.<Type>asList(new Uint256(id),
                new Uint256(amount)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] auctionNft(BigInteger id, BigInteger amount, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_AUCTIONNFT, 
                Arrays.<Type>asList(new Uint256(id),
                new Uint256(amount)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAuctionNft(BigInteger id, BigInteger amount) {
        final Function function = new Function(
                FUNC_AUCTIONNFT, 
                Arrays.<Type>asList(new Uint256(id),
                new Uint256(amount)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<BigInteger, BigInteger> getAuctionNftInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_AUCTIONNFT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<BigInteger, BigInteger>(

                (BigInteger) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public BigInteger balanceOf(String account, BigInteger id) throws ContractException {
        final Function function = new Function(FUNC_BALANCEOF, 
                Arrays.<Type>asList(new Address(account),
                new Uint256(id)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public List balanceOfBatch(List<String> accounts, List<BigInteger> ids) throws ContractException {
        final Function function = new Function(FUNC_BALANCEOFBATCH, 
                Arrays.<Type>asList(new DynamicArray<Address>(
                org.fisco.bcos.sdk.abi.Utils.typeMap(accounts, Address.class)),
                new DynamicArray<Uint256>(
                org.fisco.bcos.sdk.abi.Utils.typeMap(ids, Uint256.class))),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public TransactionReceipt buyNft(BigInteger id) {
        final Function function = new Function(
                FUNC_BUYNFT, 
                Arrays.<Type>asList(new Uint256(id)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] buyNft(BigInteger id, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_BUYNFT, 
                Arrays.<Type>asList(new Uint256(id)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForBuyNft(BigInteger id) {
        final Function function = new Function(
                FUNC_BUYNFT, 
                Arrays.<Type>asList(new Uint256(id)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getBuyNftInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_BUYNFT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public BigInteger getBalance() throws ContractException {
        final Function function = new Function(FUNC_GETBALANCE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public DynamicArray<NftStorage.ItemLife> getNftLife(BigInteger id) throws ContractException {
        final Function function = new Function(FUNC_GETNFTLIFE, 
                Arrays.<Type>asList(new Uint256(id)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<NftStorage.ItemLife>>() {}));
        return executeCallWithSingleValueReturn(function, DynamicArray.class);
    }

    public Boolean isApprovedForAll(String account, String operator) throws ContractException {
        final Function function = new Function(FUNC_ISAPPROVEDFORALL, 
                Arrays.<Type>asList(new Address(account),
                new Address(operator)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public TransactionReceipt issueNft(String token_url, BigInteger price) {
        final Function function = new Function(
                FUNC_ISSUENFT, 
                Arrays.<Type>asList(new Utf8String(token_url),
                new Uint256(price)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] issueNft(String token_url, BigInteger price, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ISSUENFT, 
                Arrays.<Type>asList(new Utf8String(token_url),
                new Uint256(price)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForIssueNft(String token_url, BigInteger price) {
        final Function function = new Function(
                FUNC_ISSUENFT, 
                Arrays.<Type>asList(new Utf8String(token_url),
                new Uint256(price)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getIssueNftInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ISSUENFT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public Tuple1<BigInteger> getIssueNftOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_ISSUENFT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt regiter() {
        final Function function = new Function(
                FUNC_REGITER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] regiter(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REGITER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRegiter() {
        final Function function = new Function(
                FUNC_REGITER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public TransactionReceipt safeBatchTransferFrom(String from, String to, List<BigInteger> ids, List<BigInteger> amounts, byte[] data) {
        final Function function = new Function(
                FUNC_SAFEBATCHTRANSFERFROM, 
                Arrays.<Type>asList(new Address(from),
                new Address(to),
                new DynamicArray<Uint256>(
                org.fisco.bcos.sdk.abi.Utils.typeMap(ids, Uint256.class)),
                new DynamicArray<Uint256>(
                org.fisco.bcos.sdk.abi.Utils.typeMap(amounts, Uint256.class)),
                new DynamicBytes(data)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] safeBatchTransferFrom(String from, String to, List<BigInteger> ids, List<BigInteger> amounts, byte[] data, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SAFEBATCHTRANSFERFROM, 
                Arrays.<Type>asList(new Address(from),
                new Address(to),
                new DynamicArray<Uint256>(
                org.fisco.bcos.sdk.abi.Utils.typeMap(ids, Uint256.class)),
                new DynamicArray<Uint256>(
                org.fisco.bcos.sdk.abi.Utils.typeMap(amounts, Uint256.class)),
                new DynamicBytes(data)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSafeBatchTransferFrom(String from, String to, List<BigInteger> ids, List<BigInteger> amounts, byte[] data) {
        final Function function = new Function(
                FUNC_SAFEBATCHTRANSFERFROM, 
                Arrays.<Type>asList(new Address(from),
                new Address(to),
                new DynamicArray<Uint256>(
                org.fisco.bcos.sdk.abi.Utils.typeMap(ids, Uint256.class)),
                new DynamicArray<Uint256>(
                org.fisco.bcos.sdk.abi.Utils.typeMap(amounts, Uint256.class)),
                new DynamicBytes(data)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple5<String, String, List<BigInteger>, List<BigInteger>, byte[]> getSafeBatchTransferFromInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SAFEBATCHTRANSFERFROM, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicBytes>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple5<String, String, List<BigInteger>, List<BigInteger>, byte[]>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                convertToNative((List<Uint256>) results.get(2).getValue()), 
                convertToNative((List<Uint256>) results.get(3).getValue()), 
                (byte[]) results.get(4).getValue()
                );
    }

    public TransactionReceipt safeTransferFrom(String from, String to, BigInteger id, BigInteger amount, byte[] data) {
        final Function function = new Function(
                FUNC_SAFETRANSFERFROM, 
                Arrays.<Type>asList(new Address(from),
                new Address(to),
                new Uint256(id),
                new Uint256(amount),
                new DynamicBytes(data)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] safeTransferFrom(String from, String to, BigInteger id, BigInteger amount, byte[] data, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SAFETRANSFERFROM, 
                Arrays.<Type>asList(new Address(from),
                new Address(to),
                new Uint256(id),
                new Uint256(amount),
                new DynamicBytes(data)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSafeTransferFrom(String from, String to, BigInteger id, BigInteger amount, byte[] data) {
        final Function function = new Function(
                FUNC_SAFETRANSFERFROM, 
                Arrays.<Type>asList(new Address(from),
                new Address(to),
                new Uint256(id),
                new Uint256(amount),
                new DynamicBytes(data)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple5<String, String, BigInteger, BigInteger, byte[]> getSafeTransferFromInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SAFETRANSFERFROM, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<DynamicBytes>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple5<String, String, BigInteger, BigInteger, byte[]>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue(), 
                (byte[]) results.get(4).getValue()
                );
    }

    public TransactionReceipt setApprovalForAll(String operator, Boolean approved) {
        final Function function = new Function(
                FUNC_SETAPPROVALFORALL, 
                Arrays.<Type>asList(new Address(operator),
                new Bool(approved)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setApprovalForAll(String operator, Boolean approved, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETAPPROVALFORALL, 
                Arrays.<Type>asList(new Address(operator),
                new Bool(approved)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetApprovalForAll(String operator, Boolean approved) {
        final Function function = new Function(
                FUNC_SETAPPROVALFORALL, 
                Arrays.<Type>asList(new Address(operator),
                new Bool(approved)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, Boolean> getSetApprovalForAllInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETAPPROVALFORALL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, Boolean>(

                (String) results.get(0).getValue(), 
                (Boolean) results.get(1).getValue()
                );
    }

    public Boolean supportsInterface(byte[] interfaceId) throws ContractException {
        final Function function = new Function(FUNC_SUPPORTSINTERFACE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes4(interfaceId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public TransactionReceipt tranferNft(BigInteger id, String to) {
        final Function function = new Function(
                FUNC_TRANFERNFT, 
                Arrays.<Type>asList(new Uint256(id),
                new Address(to)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] tranferNft(BigInteger id, String to, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_TRANFERNFT, 
                Arrays.<Type>asList(new Uint256(id),
                new Address(to)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForTranferNft(BigInteger id, String to) {
        final Function function = new Function(
                FUNC_TRANFERNFT, 
                Arrays.<Type>asList(new Uint256(id),
                new Address(to)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<BigInteger, String> getTranferNftInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_TRANFERNFT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<BigInteger, String>(

                (BigInteger) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public TransactionReceipt upOrDown(BigInteger id, Boolean choice) {
        final Function function = new Function(
                FUNC_UPORDOWN, 
                Arrays.<Type>asList(new Uint256(id),
                new Bool(choice)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] upOrDown(BigInteger id, Boolean choice, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UPORDOWN, 
                Arrays.<Type>asList(new Uint256(id),
                new Bool(choice)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUpOrDown(BigInteger id, Boolean choice) {
        final Function function = new Function(
                FUNC_UPORDOWN, 
                Arrays.<Type>asList(new Uint256(id),
                new Bool(choice)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<BigInteger, Boolean> getUpOrDownInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPORDOWN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<BigInteger, Boolean>(

                (BigInteger) results.get(0).getValue(), 
                (Boolean) results.get(1).getValue()
                );
    }

    public String uri(BigInteger id) throws ContractException {
        final Function function = new Function(FUNC_URI, 
                Arrays.<Type>asList(new Uint256(id)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public static NftMarket load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new NftMarket(contractAddress, client, credential);
    }

    public static NftMarket deploy(Client client, CryptoKeyPair credential, String sto, String ver) throws ContractException {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Address(sto),
                new Address(ver)));
        return deploy(NftMarket.class, client, credential, getBinary(client.getCryptoSuite()), encodedConstructor);
    }

    public static class ApprovalForAllEventResponse {
        public TransactionReceipt.Logs log;

        public String account;

        public String operator;

        public Boolean approved;
    }

    public static class TransferBatchEventResponse {
        public TransactionReceipt.Logs log;

        public String operator;

        public String from;

        public String to;

        public List<BigInteger> ids;

        public List<BigInteger> values;
    }

    public static class TransferSingleEventResponse {
        public TransactionReceipt.Logs log;

        public String operator;

        public String from;

        public String to;

        public BigInteger id;

        public BigInteger value;
    }

    public static class URIEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger id;

        public String value;
    }
}

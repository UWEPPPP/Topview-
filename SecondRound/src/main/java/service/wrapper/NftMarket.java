package service.wrapper;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Address;
import org.fisco.bcos.sdk.abi.datatypes.Bool;
import org.fisco.bcos.sdk.abi.datatypes.DynamicArray;
import org.fisco.bcos.sdk.abi.datatypes.DynamicBytes;
import org.fisco.bcos.sdk.abi.datatypes.DynamicStruct;
import org.fisco.bcos.sdk.abi.datatypes.Event;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple5;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.eventsub.EventCallback;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class NftMarket extends Contract {
    public static final String[] BINARY_ARRAY = {"60c0604052601360808190527f68747470732f2f697066732e696f2f697066730000000000000000000000000060a0908152620000409160059190620000dd565b5060016006553480156200005357600080fd5b50600080546001600160a01b03191633178082556001600160a01b031681527fa6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb49602052604090206107d09055620000b26001600160e01b03620000d816565b600780546001600160a01b0319166001600160a01b03929092169190911790556200017f565b335b90565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200012057805160ff191683800117855562000150565b8280016001018555821562000150579182015b828111156200015057825182559160200191906001019062000133565b506200015e92915062000162565b5090565b620000da91905b808211156200015e576000815560010162000169565b611ab9806200018f6000396000f3fe608060405234801561001057600080fd5b50600436106100e95760003560e01c80636d017d6d1161008c578063bb2bfd7c11610066578063bb2bfd7c146101e0578063c0bcc07a146101e8578063e985e9c514610208578063f242432a1461021b576100e9565b80636d017d6d146101a7578063750c7ada146101ba578063a22cb465146101cd576100e9565b806312065fe0116100c857806312065fe0146101575780632eb2c2d61461015f5780634e1273f414610174578063556f808414610194576100e9565b8062fdd58e146100ee57806301ffc9a7146101175780630e89341c14610137575b600080fd5b6101016100fc36600461127f565b61022e565b60405161010e9190611949565b60405180910390f35b61012a61012536600461136b565b61028a565b60405161010e9190611610565b61014a6101453660046113e5565b6102ca565b60405161010e919061161b565b61010161036f565b61017261016d366004611135565b610389565b005b6101876101823660046112a9565b6103f2565b60405161010e91906115cf565b6101726101a2366004611487565b6104bf565b6101726101b53660046113fd565b610547565b6101016101c83660046113aa565b61059a565b6101726101db366004611244565b6105e8565b6101726105fe565b6101fb6101f63660046113e5565b61063c565b60405161010e919061190c565b61012a610216366004611101565b610704565b6101726102293660046111df565b610732565b60006001600160a01b03831661025f5760405162461bcd60e51b815260040161025690611676565b60405180910390fd5b5060008181526001602090815260408083206001600160a01b03861684529091529020545b92915050565b60006001600160e01b03198216636cdb3d1360e11b14806102bb57506001600160e01b031982166303a24d0760e21b145b80610284575061028482610821565b6000818152600360209081526040918290208054835160026001831615610100026000190190921691909104601f810184900484028201840190945283815260609384939192918301828280156103625780601f1061033757610100808354040283529160200191610362565b820191906000526020600020905b81548152906001019060200180831161034557829003601f168201915b5093979650505050505050565b600061038361037c61083a565b600061022e565b90505b90565b61039161083a565b6001600160a01b0316856001600160a01b031614806103c257506000546103c29086906001600160a01b0316610704565b6103de5760405162461bcd60e51b8152600401610256906116c0565b6103eb858585858561083e565b5050505050565b606081518351146104155760405162461bcd60e51b8152600401610256906117e6565b6060835167ffffffffffffffff8111801561042f57600080fd5b50604051908082528060200260200182016040528015610459578160200160208202803683370190505b50905060005b84518110156104b75761049885828151811061047757fe5b602002602001015185838151811061048b57fe5b602002602001015161022e565b8282815181106104a457fe5b602090810291909101015260010161045f565b509392505050565b6104c7610f63565b6104d08361063c565b90506104fa6104dd61083a565b826020015160008560405180602001604052806000815250610732565b610522816020015161050a61083a565b85600160405180602001604052806000815250610732565b61052a61083a565b6001600160a01b031660208201526105428382610547565b505050565b600082815260036020908152604090912082518051849361056c928492910190610f7b565b5060209190910151600190910180546001600160a01b0319166001600160a01b039092169190911790555050565b6006546000906105c56105ab61083a565b6006546001604051806020016040528060008152506109db565b6105d9600654846105d461083a565b610aea565b60068054600101905592915050565b6105fa6105f361083a565b8383610b5a565b5050565b61062361060961083a565b60006103e8604051806020016040528060008152506109db565b60075461063a906001600160a01b031660016105e8565b565b610644610f63565b6000828152600360209081526040918290208251815460026001821615610100026000190190911604601f81018490049093028101606090810185529381018381529093919284928491908401828280156106e05780601f106106b5576101008083540402835291602001916106e0565b820191906000526020600020905b8154815290600101906020018083116106c357829003601f168201915b5050509183525050600191909101546001600160a01b031660209091015292915050565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205460ff1690565b61073a61083a565b6001600160a01b0316856001600160a01b0316148061076057506107608561021661083a565b8061079057506001600160a01b0380851660009081526004602090815260408083209389168352929052205460ff165b6107ac5760405162461bcd60e51b8152600401610256906116c0565b826107e6576001600160a01b038086166000908152600460209081526040808320938816835292905220805460ff19166001179055610814565b6001600160a01b038085166000908152600460209081526040808320938916835292905220805460ff191690555b6103eb8585858585610bfd565b6001600160e01b031981166301ffc9a760e01b14919050565b3390565b815183511461085f5760405162461bcd60e51b81526004016102569061182f565b6001600160a01b0384166108855760405162461bcd60e51b81526004016102569061170e565b600061088f61083a565b905061089f8187878787876109d3565b60005b845181101561095f5760008582815181106108b957fe5b6020026020010151905060008583815181106108d157fe5b60209081029190910181015160008481526001835260408082206001600160a01b038e1683529093529190912054909150818110156109225760405162461bcd60e51b815260040161025690611753565b60009283526001602081815260408086206001600160a01b038e811688529252808620938590039093558a168452922080549091019055016108a2565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516109af9291906115e2565b60405180910390a46109c58187878787876109d3565b6109d3818787878787610d3a565b505050505050565b6001600160a01b038416610a015760405162461bcd60e51b815260040161025690611877565b600080548482526001602090815260408084206001600160a01b03909316808552929091529091208054840190556060610a3a85610e48565b90506060610a4785610e48565b9050610a58836000898585896109d3565b60008681526001602090815260408083206001600160a01b03808c168086529190935281842080548a01905590519092918616907fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6290610abb908b908b90611952565b60405180910390a4610ad2836000898585896109d3565b610ae183600089898989610e8c565b50505050505050565b6040805180820182528381526001600160a01b038316602080830191909152600086815260038252929092208151805192939192610b2b9284920190610f7b565b5060209190910151600190910180546001600160a01b0319166001600160a01b03909216919091179055505050565b816001600160a01b0316836001600160a01b03161415610b8c5760405162461bcd60e51b81526004016102569061179d565b6001600160a01b0383811660008181526002602090815260408083209487168084529490915290819020805460ff1916851515179055517f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3190610bf0908590611610565b60405180910390a3505050565b6001600160a01b038416610c235760405162461bcd60e51b81526004016102569061170e565b6000610c2d61083a565b90506060610c3a85610e48565b90506060610c4785610e48565b9050610c578389898585896109d3565b60008681526001602090815260408083206001600160a01b038c16845290915290205485811015610c9a5760405162461bcd60e51b815260040161025690611753565b60008781526001602090815260408083206001600160a01b038d8116808652919093528184208a860390558b83168085529382902080548b019055905190918716907fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6290610d0b908c908c90611952565b60405180910390a4610d21848a8a86868a6109d3565b610d2f848a8a8a8a8a610e8c565b505050505050505050565b610d4c846001600160a01b0316610f5d565b156109d35760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190610d85908990899088908890889060040161152d565b602060405180830381600087803b158015610d9f57600080fd5b505af1925050508015610dcf575060408051601f3d908101601f19168201909252610dcc9181019061138e565b60015b610e1857610ddb6119ad565b80610de65750610e00565b8060405162461bcd60e51b8152600401610256919061161b565b60405162461bcd60e51b8152600401610256906118b8565b6001600160e01b0319811663bc197c8160e01b14610ae15760405162461bcd60e51b81526004016102569061162e565b60408051600180825281830190925260609182919060208083019080368337019050509050828160","0081518110610e7b57fe5b602090810291909101015292915050565b610e9e846001600160a01b0316610f5d565b156109d35760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190610ed7908990899088908890889060040161158a565b602060405180830381600087803b158015610ef157600080fd5b505af1925050508015610f21575060408051601f3d908101601f19168201909252610f1e9181019061138e565b60015b610f2d57610ddb6119ad565b6001600160e01b0319811663f23a6e6160e01b14610ae15760405162461bcd60e51b81526004016102569061162e565b3b151590565b60408051808201909152606081526000602082015290565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610fbc57805160ff1916838001178555610fe9565b82800160010185558215610fe9579182015b82811115610fe9578251825591602001919060010190610fce565b50610ff5929150610ff9565b5090565b61038691905b80821115610ff55760008155600101610fff565b80356001600160a01b038116811461028457600080fd5b600082601f83011261103a578081fd5b813561104d61104882611987565b611960565b81815291506020808301908481018184028601820187101561106e57600080fd5b60005b8481101561108d57813584529282019290820190600101611071565b505050505092915050565b600082601f8301126110a8578081fd5b813567ffffffffffffffff8111156110be578182fd5b6110d1601f8201601f1916602001611960565b91508082528360208285010111156110e857600080fd5b8060208401602084013760009082016020015292915050565b60008060408385031215611113578182fd5b61111d8484611013565b915061112c8460208501611013565b90509250929050565b600080600080600060a0868803121561114c578081fd5b853561115781611a55565b9450602086013561116781611a55565b9350604086013567ffffffffffffffff80821115611183578283fd5b61118f89838a0161102a565b945060608801359150808211156111a4578283fd5b6111b089838a0161102a565b935060808801359150808211156111c5578283fd5b506111d288828901611098565b9150509295509295909350565b600080600080600060a086880312156111f6578081fd5b6112008787611013565b945061120f8760208801611013565b93506040860135925060608601359150608086013567ffffffffffffffff811115611238578182fd5b6111d288828901611098565b60008060408385031215611256578182fd5b6112608484611013565b915060208301358015158114611274578182fd5b809150509250929050565b60008060408385031215611291578182fd5b61129b8484611013565b946020939093013593505050565b600080604083850312156112bb578182fd5b823567ffffffffffffffff808211156112d2578384fd5b81850186601f8201126112e3578485fd5b803592506112f361104884611987565b80848252602080830192508084018a828389028701011115611313578889fd5b8894505b8685101561133d576113298b82611013565b845260019490940193928101928101611317565b509096508701359350505080821115611354578283fd5b506113618582860161102a565b9150509250929050565b60006020828403121561137c578081fd5b813561138781611a6d565b9392505050565b60006020828403121561139f578081fd5b815161138781611a6d565b6000602082840312156113bb578081fd5b813567ffffffffffffffff8111156113d1578182fd5b6113dd84828501611098565b949350505050565b6000602082840312156113f6578081fd5b5035919050565b6000806040838503121561140f578081fd5b82359150602083013567ffffffffffffffff8082111561142d578283fd5b8185016040818803121561143f578384fd5b6114496040611960565b9250803582811115611459578485fd5b61146588828401611098565b84525060200135905061147781611a55565b6020820152919491935090915050565b60008060408385031215611499578182fd5b50508035926020909101359150565b6000815180845260208085019450808401835b838110156114d7578151875295820195908201906001016114bb565b509495945050505050565b60008151808452815b81811015611507576020818501810151868301820152016114eb565b818111156115185782602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b0386811682528516602082015260a060408201819052600090611559908301866114a8565b828103606084015261156b81866114a8565b838103608085015261157d81866114e2565b9998505050505050505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a0608082018190526000906115c4908301846114e2565b979650505050505050565b60006020825261138760208301846114a8565b6000604082526115f560408301856114a8565b828103602084015261160781856114a8565b95945050505050565b901515815260200190565b60006020825261138760208301846114e2565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6020808252602a908201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660408201526930b634b21037bbb732b960b11b606082015260800190565b6020808252602e908201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60408201526d195c881bdc88185c1c1c9bdd995960921b606082015260800190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b60208082526029908201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604082015268103337b91039b2b63360b91b606082015260800190565b60208082526029908201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604082015268040dad2e6dac2e8c6d60bb1b606082015260800190565b60208082526028908201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206040820152670dad2e6dac2e8c6d60c31b606082015260800190565b60208082526021908201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736040820152607360f81b606082015260800190565b60208082526034908201527f455243313135353a207472616e7366657220746f206e6f6e2d455243313135356040820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b606082015260800190565b60006020825282516040602084015261192860608401826114e2565b602094909401516001600160a01b0316604093909301929092525090919050565b90815260200190565b918252602082015260400190565b60405181810167ffffffffffffffff8111828210171561197f57600080fd5b604052919050565b600067ffffffffffffffff82111561199d578081fd5b5060209081020190565b60e01c90565b600060443d10156119bd57610386565b600481823e6308c379a06119d182516119a7565b146119db57610386565b6040513d600319016004823e80513d67ffffffffffffffff8160248401118184111715611a0b5750505050610386565b82840191508151925080831115611a255750505050610386565b503d83016020838301011115611a3d57505050610386565b601f91909101601f1916810160200160405291505090565b6001600160a01b0381168114611a6a57600080fd5b50565b6001600160e01b031981168114611a6a57600080fdfea2646970667358221220bae01bb645b403e4a60f85b1351a79fec7998dc10d525b8ed176d7c1cda3030364736f6c634300060a0033"};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"","0319811663ced0021160e01b1461093057604051636381e58960e11b81526004016104729061168b565b610eac846001600160a01b0316610f6c565b15610be557604051635780de2d60e01b81526001600160a01b03851690635780de2d90610ee5908990899088908890889060040161153c565b602060405180830381600087803b158015610eff57600080fd5b505af1925050508015610f2f575060408051601f3d908101601f19168201909252610f2c9181019061139d565b60015b610f3b57610e2a6119bc565b6001600160e01b03198116635780de2d60e01b1461093057604051636381e58960e11b81526004016104729061168b565b3b151590565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610fb357805160ff1916838001178555610fe0565b82800160010185558215610fe0579182015b82811115610fe0578251825591602001919060010190610fc5565b50610fec929150611008565b5090565b60408051808201909152606081526000602082015290565b6105e791905b80821115610fec576000815560010161100e565b80356001600160a01b038116811461034e57600080fd5b600082601f830112611049578081fd5b813561105c61105782611996565b61196f565b81815291506020808301908481018184028601820187101561107d57600080fd5b60005b8481101561109c57813584529282019290820190600101611080565b505050505092915050565b600082601f8301126110b7578081fd5b813567ffffffffffffffff8111156110cd578182fd5b6110e0601f8201601f191660200161196f565b91508082528360208285010111156110f757600080fd5b8060208401602084013760009082016020015292915050565b60008060408385031215611122578182fd5b61112c8484611022565b915061113b8460208501611022565b90509250929050565b600080600080600060a0868803121561115b578081fd5b853561116681611a64565b9450602086013561117681611a64565b9350604086013567ffffffffffffffff80821115611192578283fd5b61119e89838a01611039565b945060608801359150808211156111b3578283fd5b6111bf89838a01611039565b935060808801359150808211156111d4578283fd5b506111e1888289016110a7565b9150509295509295909350565b600080600080600060a08688031215611205578081fd5b61120f8787611022565b945061121e8760208801611022565b93506040860135925060608601359150608086013567ffffffffffffffff811115611247578182fd5b6111e1888289016110a7565b60008060408385031215611265578182fd5b61126f8484611022565b915060208301358015158114611283578182fd5b809150509250929050565b600080604083850312156112a0578182fd5b6112aa8484611022565b946020939093013593505050565b600080604083850312156112ca578182fd5b823567ffffffffffffffff808211156112e1578384fd5b81850186601f8201126112f2578485fd5b8035925061130261105784611996565b80848252602080830192508084018a828389028701011115611322578889fd5b8894505b8685101561134c576113388b82611022565b845260019490940193928101928101611326565b509096508701359350505080821115611363578283fd5b5061137085828601611039565b9150509250929050565b60006020828403121561138b578081fd5b813561139681611a7c565b9392505050565b6000602082840312156113ae578081fd5b815161139681611a7c565b6000602082840312156113ca578081fd5b813567ffffffffffffffff8111156113e0578182fd5b6113ec848285016110a7565b949350505050565b600060208284031215611405578081fd5b5035919050565b6000806040838503121561141e578081fd5b82359150602083013567ffffffffffffffff8082111561143c578283fd5b8185016040818803121561144e578384fd5b611458604061196f565b9250803582811115611468578485fd5b611474888284016110a7565b84525060200135905061148681611a64565b6020820152919491935090915050565b600080604083850312156114a8578182fd5b50508035926020909101359150565b6000815180845260208085019450808401835b838110156114e6578151875295820195908201906001016114ca565b509495945050505050565b60008151808452815b81811015611516576020818501810151868301820152016114fa565b818111156115275782602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b0386811682528516602082015260a060408201819052600090611568908301866114b7565b828103606084015261157a81866114b7565b838103608085015261158c81866114f1565b9998505050505050505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a0608082018190526000906115d3908301846114f1565b979650505050505050565b60006020825261139660208301846114b7565b60006040825261160460408301856114b7565b828103602084015261161681856114b7565b95945050505050565b901515815260200190565b60006020825261139660208301846114f1565b6020808252602e908201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60408201526d195c881bdc88185c1c1c9bdd995960921b606082015260800190565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b60208082526028908201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206040820152670dad2e6dac2e8c6d60c31b606082015260800190565b60208082526034908201527f455243313135353a207472616e7366657220746f206e6f6e2d455243313135356040820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b606082015260800190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b60208082526029908201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604082015268103337b91039b2b63360b91b606082015260800190565b60208082526029908201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604082015268040dad2e6dac2e8c6d60bb1b606082015260800190565b6020808252602a908201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660408201526930b634b21037bbb732b960b11b606082015260800190565b60208082526021908201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736040820152607360f81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b60006020825282516040602084015261193760608401826114f1565b602094909401516001600160a01b0316604093909301929092525090919050565b90815260200190565b918252602082015260400190565b60405181810167ffffffffffffffff8111828210171561198e57600080fd5b604052919050565b600067ffffffffffffffff8211156119ac578081fd5b5060209081020190565b60e01c90565b600060443d10156119cc576105e7565b600481823e63c703cb126119e082516119b6565b146119ea576105e7565b6040513d600319016004823e80513d67ffffffffffffffff8160248401118184111715611a1a57505050506105e7565b82840191508151925080831115611a3457505050506105e7565b503d83016020838301011115611a4c575050506105e7565b601f91909101601f1916810160200160405291505090565b6001600160a01b0381168114611a7957600080fd5b50565b6001600160e01b031981168114611a7957600080fdfea2646970667358221220cc8efd192fadc7a984ba2ac40b6a8ef2df822f841b7cb8d7439808960281ef9564736f6c634300060a0033"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buyNft\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"token_url\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"internalType\":\"struct ERC1155.Token\",\"name\":\"token\",\"type\":\"tuple\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getTokenDetail\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"token_url\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"internalType\":\"struct ERC1155.Token\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"token_url\",\"type\":\"string\"}],\"name\":\"issueNft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"regiter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_BALANCEOFBATCH = "balanceOfBatch";

    public static final String FUNC_BUYNFT = "buyNft";

    public static final String FUNC_CHANGEOWNER = "changeOwner";

    public static final String FUNC_GETBALANCE = "getBalance";

    public static final String FUNC_GETTOKENDETAIL = "getTokenDetail";

    public static final String FUNC_ISAPPROVEDFORALL = "isApprovedForAll";

    public static final String FUNC_ISSUENFT = "issueNft";

    public static final String FUNC_REGITER = "regiter";

    public static final String FUNC_SAFEBATCHTRANSFERFROM = "safeBatchTransferFrom";

    public static final String FUNC_SAFETRANSFERFROM = "safeTransferFrom";

    public static final String FUNC_SETAPPROVALFORALL = "setApprovalForAll";

    public static final String FUNC_SUPPORTSINTERFACE = "supportsInterface";

    public static final String FUNC_URI = "uri";

    public static final Event APPROVALFORALL_EVENT = new Event("ApprovalForAll", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Bool>() {}));
    ;

    public static final Event TRANSFERBATCH_EVENT = new Event("TransferBatch", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
    ;

    public static final Event TRANSFERSINGLE_EVENT = new Event("TransferSingle", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event URI_EVENT = new Event("URI", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>(true) {}));
    ;

    protected NftMarket(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public List<ApprovalForAllEventResponse> getApprovalForAllEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVALFORALL_EVENT, transactionReceipt);
        ArrayList<ApprovalForAllEventResponse> responses = new ArrayList<ApprovalForAllEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeApprovalForAllEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(APPROVALFORALL_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeApprovalForAllEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(APPROVALFORALL_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<TransferBatchEventResponse> getTransferBatchEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFERBATCH_EVENT, transactionReceipt);
        ArrayList<TransferBatchEventResponse> responses = new ArrayList<TransferBatchEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            TransferBatchEventResponse typedResponse = new TransferBatchEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.from = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.ids = (List<BigInteger>) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.values = (List<BigInteger>) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeTransferBatchEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(TRANSFERBATCH_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeTransferBatchEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(TRANSFERBATCH_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<TransferSingleEventResponse> getTransferSingleEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFERSINGLE_EVENT, transactionReceipt);
        ArrayList<TransferSingleEventResponse> responses = new ArrayList<TransferSingleEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            TransferSingleEventResponse typedResponse = new TransferSingleEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.from = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeTransferSingleEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(TRANSFERSINGLE_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeTransferSingleEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(TRANSFERSINGLE_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<URIEventResponse> getURIEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(URI_EVENT, transactionReceipt);
        ArrayList<URIEventResponse> responses = new ArrayList<URIEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            URIEventResponse typedResponse = new URIEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.value = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeURIEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(URI_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeURIEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(URI_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public BigInteger balanceOf(String account, BigInteger id) throws ContractException {
        final Function function = new Function(FUNC_BALANCEOF, 
                Arrays.<Type>asList(new Address(account),
                new Uint256(id)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public List balanceOfBatch(List<String> accounts, List<BigInteger> ids) throws ContractException {
        final Function function = new Function(FUNC_BALANCEOFBATCH, 
                Arrays.<Type>asList(new DynamicArray<Address>(
                org.fisco.bcos.sdk.abi.Utils.typeMap(accounts, Address.class)),
                new DynamicArray<Uint256>(
                org.fisco.bcos.sdk.abi.Utils.typeMap(ids, Uint256.class))),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public TransactionReceipt buyNft(BigInteger id, BigInteger amount) {
        final Function function = new Function(
                FUNC_BUYNFT, 
                Arrays.<Type>asList(new Uint256(id),
                new Uint256(amount)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] buyNft(BigInteger id, BigInteger amount, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_BUYNFT, 
                Arrays.<Type>asList(new Uint256(id),
                new Uint256(amount)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForBuyNft(BigInteger id, BigInteger amount) {
        final Function function = new Function(
                FUNC_BUYNFT, 
                Arrays.<Type>asList(new Uint256(id),
                new Uint256(amount)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<BigInteger, BigInteger> getBuyNftInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_BUYNFT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<BigInteger, BigInteger>(

                (BigInteger) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public TransactionReceipt changeOwner(BigInteger id, Token token) {
        final Function function = new Function(
                FUNC_CHANGEOWNER, 
                Arrays.<Type>asList(new Uint256(id),
                token), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] changeOwner(BigInteger id, Token token, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_CHANGEOWNER, 
                Arrays.<Type>asList(new Uint256(id),
                token), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForChangeOwner(BigInteger id, Token token) {
        final Function function = new Function(
                FUNC_CHANGEOWNER, 
                Arrays.<Type>asList(new Uint256(id),
                token), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<BigInteger, Token> getChangeOwnerInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CHANGEOWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Token>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<BigInteger, Token>(

                (BigInteger) results.get(0).getValue(), 
                (Token) results.get(1)
                );
    }

    public BigInteger getBalance() throws ContractException {
        final Function function = new Function(FUNC_GETBALANCE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public Token getTokenDetail(BigInteger id) throws ContractException {
        final Function function = new Function(FUNC_GETTOKENDETAIL, 
                Arrays.<Type>asList(new Uint256(id)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Token>() {}));
        return executeCallWithSingleValueReturn(function, Token.class);
    }

    public Boolean isApprovedForAll(String account, String operator) throws ContractException {
        final Function function = new Function(FUNC_ISAPPROVEDFORALL, 
                Arrays.<Type>asList(new Address(account),
                new Address(operator)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public TransactionReceipt issueNft(String token_url) {
        final Function function = new Function(
                FUNC_ISSUENFT, 
                Arrays.<Type>asList(new Utf8String(token_url)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] issueNft(String token_url, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ISSUENFT, 
                Arrays.<Type>asList(new Utf8String(token_url)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForIssueNft(String token_url) {
        final Function function = new Function(
                FUNC_ISSUENFT, 
                Arrays.<Type>asList(new Utf8String(token_url)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getIssueNftInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ISSUENFT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public Tuple1<BigInteger> getIssueNftOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_ISSUENFT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt regiter() {
        final Function function = new Function(
                FUNC_REGITER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] regiter(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REGITER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRegiter() {
        final Function function = new Function(
                FUNC_REGITER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public TransactionReceipt safeBatchTransferFrom(String from, String to, List<BigInteger> ids, List<BigInteger> amounts, byte[] data) {
        final Function function = new Function(
                FUNC_SAFEBATCHTRANSFERFROM, 
                Arrays.<Type>asList(new Address(from),
                new Address(to),
                new DynamicArray<Uint256>(
                org.fisco.bcos.sdk.abi.Utils.typeMap(ids, Uint256.class)),
                new DynamicArray<Uint256>(
                org.fisco.bcos.sdk.abi.Utils.typeMap(amounts, Uint256.class)),
                new DynamicBytes(data)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] safeBatchTransferFrom(String from, String to, List<BigInteger> ids, List<BigInteger> amounts, byte[] data, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SAFEBATCHTRANSFERFROM, 
                Arrays.<Type>asList(new Address(from),
                new Address(to),
                new DynamicArray<Uint256>(
                org.fisco.bcos.sdk.abi.Utils.typeMap(ids, Uint256.class)),
                new DynamicArray<Uint256>(
                org.fisco.bcos.sdk.abi.Utils.typeMap(amounts, Uint256.class)),
                new DynamicBytes(data)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSafeBatchTransferFrom(String from, String to, List<BigInteger> ids, List<BigInteger> amounts, byte[] data) {
        final Function function = new Function(
                FUNC_SAFEBATCHTRANSFERFROM, 
                Arrays.<Type>asList(new Address(from),
                new Address(to),
                new DynamicArray<Uint256>(
                org.fisco.bcos.sdk.abi.Utils.typeMap(ids, Uint256.class)),
                new DynamicArray<Uint256>(
                org.fisco.bcos.sdk.abi.Utils.typeMap(amounts, Uint256.class)),
                new DynamicBytes(data)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple5<String, String, List<BigInteger>, List<BigInteger>, byte[]> getSafeBatchTransferFromInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SAFEBATCHTRANSFERFROM, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicBytes>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple5<String, String, List<BigInteger>, List<BigInteger>, byte[]>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                convertToNative((List<Uint256>) results.get(2).getValue()), 
                convertToNative((List<Uint256>) results.get(3).getValue()), 
                (byte[]) results.get(4).getValue()
                );
    }

    public TransactionReceipt safeTransferFrom(String from, String to, BigInteger id, BigInteger amount, byte[] data) {
        final Function function = new Function(
                FUNC_SAFETRANSFERFROM, 
                Arrays.<Type>asList(new Address(from),
                new Address(to),
                new Uint256(id),
                new Uint256(amount),
                new DynamicBytes(data)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] safeTransferFrom(String from, String to, BigInteger id, BigInteger amount, byte[] data, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SAFETRANSFERFROM, 
                Arrays.<Type>asList(new Address(from),
                new Address(to),
                new Uint256(id),
                new Uint256(amount),
                new DynamicBytes(data)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSafeTransferFrom(String from, String to, BigInteger id, BigInteger amount, byte[] data) {
        final Function function = new Function(
                FUNC_SAFETRANSFERFROM, 
                Arrays.<Type>asList(new Address(from),
                new Address(to),
                new Uint256(id),
                new Uint256(amount),
                new DynamicBytes(data)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple5<String, String, BigInteger, BigInteger, byte[]> getSafeTransferFromInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SAFETRANSFERFROM, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<DynamicBytes>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple5<String, String, BigInteger, BigInteger, byte[]>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue(), 
                (byte[]) results.get(4).getValue()
                );
    }

    public TransactionReceipt setApprovalForAll(String operator, Boolean approved) {
        final Function function = new Function(
                FUNC_SETAPPROVALFORALL, 
                Arrays.<Type>asList(new Address(operator),
                new Bool(approved)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setApprovalForAll(String operator, Boolean approved, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETAPPROVALFORALL, 
                Arrays.<Type>asList(new Address(operator),
                new Bool(approved)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetApprovalForAll(String operator, Boolean approved) {
        final Function function = new Function(
                FUNC_SETAPPROVALFORALL, 
                Arrays.<Type>asList(new Address(operator),
                new Bool(approved)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, Boolean> getSetApprovalForAllInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETAPPROVALFORALL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, Boolean>(

                (String) results.get(0).getValue(), 
                (Boolean) results.get(1).getValue()
                );
    }

    public Boolean supportsInterface(byte[] interfaceId) throws ContractException {
        final Function function = new Function(FUNC_SUPPORTSINTERFACE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes4(interfaceId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public String uri(BigInteger id) throws ContractException {
        final Function function = new Function(FUNC_URI, 
                Arrays.<Type>asList(new Uint256(id)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public static NftMarket load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new NftMarket(contractAddress, client, credential);
    }

    public static NftMarket deploy(Client client, CryptoKeyPair credential) throws ContractException {
        return deploy(NftMarket.class, client, credential, getBinary(client.getCryptoSuite()), "");
    }

    public static class Token extends DynamicStruct {
        public String token_url;

        public String owner;

        public Token(Utf8String token_url, Address owner) {
            super(token_url,owner);
            this.token_url = token_url.getValue();
            this.owner = owner.getValue();
        }

        public Token(String token_url, String owner) {
            super(new Utf8String(token_url),new Address(owner));
            this.token_url = token_url;
            this.owner = owner;
        }
    }

    public static class ApprovalForAllEventResponse {
        public TransactionReceipt.Logs log;

        public String account;

        public String operator;

        public Boolean approved;
    }

    public static class TransferBatchEventResponse {
        public TransactionReceipt.Logs log;

        public String operator;

        public String from;

        public String to;

        public List<BigInteger> ids;

        public List<BigInteger> values;
    }

    public static class TransferSingleEventResponse {
        public TransactionReceipt.Logs log;

        public String operator;

        public String from;

        public String to;

        public BigInteger id;

        public BigInteger value;
    }

    public static class URIEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger id;

        public String value;
    }
}

package tv.service.wrapper;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionEncoder;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Address;
import org.fisco.bcos.sdk.abi.datatypes.Bool;
import org.fisco.bcos.sdk.abi.datatypes.DynamicArray;
import org.fisco.bcos.sdk.abi.datatypes.DynamicBytes;
import org.fisco.bcos.sdk.abi.datatypes.Event;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple5;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.eventsub.EventCallback;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;
import tv.spring.Component;
import tv.spring.Scope;

@SuppressWarnings("unchecked")
public class NftMarket extends Contract {
    public static final String[] BINARY_ARRAY = {"","1560011415610f105760405162461bcd60e51b81526004016102ee90612a78565b610f35610f1b61146b565b60006103e86040518060200160405280600081525061178e565b600454610f4c906001600160a01b03166001610e53565b565b610f566120a3565b6000546040516369e4e61360e11b81526001600160a01b039091169063d3c9cc2690610f86908690600401612dc0565b60006040518083038186803b158015610f9e57600080fd5b505afa158015610fb2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610fda9190810190612659565b9050611000610fe761146b565b838560016040518060200160405280600081525061129b565b6001600160a01b0380831660408084018290526000548151606081018352428152602080820194909452825180840184526014815273039b2b73232b2103132b4b73390309033b4b33a160651b94810194909452808301939093529051624ce66b60e41b81529216916304ce66b09161107e91879190600401612e4c565b600060405180830381600087803b15801561109857600080fd5b505af11580156110ac573d6000803e3d6000fd5b505060005460405163154098a360e11b81526001600160a01b039091169250632a8131469150610c849086908590600401612e65565b6110ea61146b565b6000546040516369e4e61360e11b81526001600160a01b03928316929091169063d3c9cc269061111e908790600401612dc0565b60006040518083038186803b15801561113657600080fd5b505afa15801561114a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526111729190810190612659565b604001516001600160a01b03161461119c5760405162461bcd60e51b81526004016102ee90612a9e565b6000546040805160a08101825242808252840160208201526001600160a01b0390921691637cff78199186919081016111d361146b565b6001600160a01b031681526020018681526020016111ef61146b565b6001600160a01b03168152506040518363ffffffff1660e01b8152600401610c84929190612dff565b600080546040516389fcd09960e01b81526001600160a01b03909116906389fcd0999061124b908690869060040161286e565b60206040518083038186803b15801561126357600080fd5b505afa158015611277573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103799190612562565b6112a361146b565b6001600160a01b0316856001600160a01b031614806112c957506112c9856102ae61146b565b8061135157506000546040516381abc1f160e01b81526001600160a01b03909116906381abc1f190611301908790899060040161286e565b60206040518083038186803b15801561131957600080fd5b505afa15801561132d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113519190612562565b61136d5760405162461bcd60e51b81526004016102ee90612b52565b826113de57600054604051630c871e7160e21b81526001600160a01b039091169063321c79c4906113a790889088906001906004016128e5565b600060405180830381600087803b1580156113c157600080fd5b505af11580156113d5573d6000803e3d6000fd5b50505050611445565b60008054604051630c871e7160e21b81526001600160a01b039091169163321c79c4916114129188918a91906004016128e5565b600060405180830381600087803b15801561142c57600080fd5b505af1158015611440573d6000803e3d6000fd5b505050505b61070e8585858585611ba8565b6001600160e01b031981166301ffc9a760e01b14919050565b3390565b81518351146114905760405162461bcd60e51b81526004016102ee90612ce3565b6001600160a01b0384166114b65760405162461bcd60e51b81526004016102ee90612ba0565b6004546001600160a01b03166114d08187878787876106a4565b60005b845181101561171a5760008582815181106114ea57fe5b60200260200101519050600085838151811061150257fe5b60209081029190910101516000805460405163bab9e5a760e01b815292935090916001600160a01b039091169063bab9e5a7906115459086908e90600401612dc9565b60206040518083038186803b15801561155d57600080fd5b505afa158015611571573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611595919061270f565b9050818110156115b75760405162461bcd60e51b81526004016102ee90612be5565b600054604051639d23dcf760e01b81526001600160a01b0390911690639d23dcf7906115ed9086908e9087870390600401612de0565b600060405180830381600087803b15801561160757600080fd5b505af115801561161b573d6000803e3d6000fd5b50506000805460405163bab9e5a760e01b81529193506001600160a01b0316915063bab9e5a7906116529087908e90600401612dc9565b60206040518083038186803b15801561166a57600080fd5b505afa15801561167e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116a2919061270f565b600054604051639d23dcf760e01b81529192506001600160a01b031690639d23dcf7906116d99087908e9088870190600401612de0565b600060405180830381600087803b1580156116f357600080fd5b505af1158015611707573d6000803e3d6000fd5b50505050505050508060010190506114d3565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb878760405161176a9291906129c1565b60405180910390a46117808187878787876106a4565b6106a4818787878787611e7a565b6001600160a01b0384166117b45760405162461bcd60e51b81526004016102ee90612d2b565b600480546000805460405163bab9e5a760e01b81526001600160a01b039384169492939091169163bab9e5a7916117ef918991879101612dc9565b60206040518083038186803b15801561180757600080fd5b505afa15801561181b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061183f919061270f565b600054604051639d23dcf760e01b81529192506001600160a01b031690639d23dcf790611876908890869089870190600401612de0565b600060405180830381600087803b15801561189057600080fd5b505af11580156118a4573d6000803e3d6000fd5b5050505060606118b386611f88565b905060606118c086611f88565b90506118d18460008a85858a6106a4565b6000805460405163bab9e5a760e01b81526001600160a01b039091169063bab9e5a790611904908b908d90600401612dc9565b60206040518083038186803b15801561191c57600080fd5b505afa158015611930573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611954919061270f565b600054604051639d23dcf760e01b81529192506001600160a01b031690639d23dcf79061198b908b908d908c870190600401612de0565b600060405180830381600087803b1580156119a557600080fd5b505af11580156119b9573d6000803e3d6000fd5b50505050886001600160a01b031660006001600160a01b0316866001600160a01b03167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628b8b604051611a0d929190612ebb565b60405180910390a4611a248560008b86868b6106a4565b61098d8560008b8b8b8b611fcc565b6000805460408051608081018252858152602081018790526001600160a01b03858116828401526060820194909452905163154098a360e11b81529290911691632a81314691611a8891889190600401612e65565b600060405180830381600087803b158015611aa257600080fd5b505af1158015611ab6573d6000803e3d6000fd5b5050505050505050565b816001600160a01b0316836001600160a01b03161415611af25760405162461bcd60e51b81526004016102ee90612c51565b6000546040516316091d4160e31b81526001600160a01b039091169063b048ea0890611b26908690869086906004016128e5565b600060405180830381600087803b158015611b4057600080fd5b505af1158015611b54573d6000803e3d6000fd5b50505050816001600160a01b0316836001600160a01b03167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051611b9b91906129ef565b60405180910390a3505050565b6001600160a01b038416611bce5760405162461bcd60e51b81526004016102ee90612ba0565b6004546001600160a01b03166060611be585611f88565b90506060611bf285611f88565b9050611c028389898585896106a4565b6000805460405163bab9e5a760e01b81526001600160a01b039091169063bab9e5a790611c35908a908d90600401612dc9565b60206040518083038186803b158015611c4d57600080fd5b505afa158015611c61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c85919061270f565b905085811015611ca75760405162461bcd60e51b81526004016102ee90612be5565b600054604051639d23dcf760e01b81526001600160a01b0390911690639d23dcf790611cdd908a908d908b870390600401612de0565b600060405180830381600087803b158015611cf757600080fd5b505af1158015611d0b573d6000803e3d6000fd5b50506000805460405163bab9e5a760e01b81529193506001600160a01b0316915063bab9e5a790611d42908b908d90600401612dc9565b60206040518083038186803b158015611d5a57600080fd5b505afa158015611d6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d92919061270f565b600054604051639d23dcf760e01b81529192506001600160a01b031690639d23dcf790611dc9908b908d908c870190600401612de0565b600060405180830381600087803b158015611de357600080fd5b505af1158015611df7573d6000803e3d6000fd5b50505050886001600160a01b03168a6001600160a01b0316866001600160a01b03167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628b8b604051611e4a929190612ebb565b60405180910390a4611e60858b8b87878b6106a4565b611e6e858b8b8b8b8b611fcc565b50505050505050505050565b611e8c846001600160a01b031661209d565b156106a45760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190611ec59089908990889088908890600401612888565b602060405180830381600087803b158015611edf57600080fd5b505af1925050508015611f0f57506040","8051601f3d908101601f19168201909252611f0c9181019061259a565b60015b611f5857611f1b612f6a565b80611f265750611f40565b8060405162461bcd60e51b81526004016102ee91906129fa565b60405162461bcd60e51b81526004016102ee90612d6c565b6001600160e01b0319811663bc197c8160e01b14610cb25760405162461bcd60e51b81526004016102ee90612a0d565b604080516001808252818301909252606091829190602080830190803683370190505090508281600081518110611fbb57fe5b602090810291909101015292915050565b611fde846001600160a01b031661209d565b156106a45760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e61906120179089908990889088908890600401612909565b602060405180830381600087803b15801561203157600080fd5b505af1925050508015612061575060408051601f3d908101601f1916820190925261205e9181019061259a565b60015b61206d57611f1b612f6a565b6001600160e01b0319811663f23a6e6160e01b14610cb25760405162461bcd60e51b81526004016102ee90612a0d565b3b151590565b6040518060800160405280606081526020016000815260200160006001600160a01b031681526020016000151581525090565b6040518060a00160405280600081526020016000815260200160006001600160a01b031681526020016000815260200160006001600160a01b031681525090565b600082601f830112612127578081fd5b813561213a61213582612ef0565b612ec9565b81815291506020808301908481018184028601820187101561215b57600080fd5b60005b8481101561217a5781358452928201929082019060010161215e565b505050505092915050565b600082601f830112612195578081fd5b81356121a361213582612f10565b91508082528360208285010111156121ba57600080fd5b8060208401602084013760009082016020015292915050565b600082601f8301126121e3578081fd5b81516121f161213582612f10565b915080825283602082850101111561220857600080fd5b612219816020840160208601612f34565b5092915050565b60008060408385031215612232578182fd5b823561223d81613012565b9150602083013561224d81613012565b809150509250929050565b600080600080600060a0868803121561226f578081fd5b853561227a81613012565b9450602086013561228a81613012565b9350604086013567ffffffffffffffff808211156122a6578283fd5b6122b289838a01612117565b945060608801359150808211156122c7578283fd5b6122d389838a01612117565b935060808801359150808211156122e8578283fd5b506122f588828901612185565b9150509295509295909350565b600080600080600060a08688031215612319578081fd5b853561232481613012565b9450602086013561233481613012565b93506040860135925060608601359150608086013567ffffffffffffffff81111561235d578182fd5b6122f588828901612185565b6000806040838503121561237b578182fd5b823561238681613012565b9150602083013561224d8161302a565b600080604083850312156123a8578182fd5b82356123b381613012565b946020939093013593505050565b600080604083850312156123d3578182fd5b823567ffffffffffffffff808211156123ea578384fd5b81850186601f8201126123fb578485fd5b8035925061240b61213584612ef0565b80848252602080830192508084018a82838902870101111561242b578889fd5b8894505b8685101561245657803561244281613012565b84526001949094019392810192810161242f565b50909650870135935050508082111561246d578283fd5b5061247a85828601612117565b9150509250929050565b60006020808385031215612496578182fd5b825167ffffffffffffffff808211156124ad578384fd5b81850186601f8201126124be578485fd5b805192506124ce61213584612ef0565b83815284810190828601875b868110156125535781518501606080601f19838f030112156124fa578a8bfd5b61250381612ec9565b8a8301518152604083015161251781613012565b818c0152828201518981111561252b578c8dfd5b6125398f8d838701016121d3565b6040830152508652505092870192908701906001016124da565b50909998505050505050505050565b600060208284031215612573578081fd5b81516103798161302a565b60006020828403121561258f578081fd5b813561037981613038565b6000602082840312156125ab578081fd5b815161037981613038565b600080604083850312156125c8578182fd5b823567ffffffffffffffff8111156125de578283fd5b6125ea85828601612185565b95602094909401359450505050565b600060a0828403121561260a578081fd5b61261460a0612ec9565b8251815260208301516020820152604083015161263081613012565b604082015260608381015190820152608083015161264d81613012565b60808201529392505050565b60006020828403121561266a578081fd5b815167ffffffffffffffff80821115612681578283fd5b81840160808187031215612693578384fd5b61269d6080612ec9565b92508051828111156126ad578485fd5b6126b9878284016121d3565b84525060208101516020840152604081015191506126d682613012565b6040830191909152606001516126eb8161302a565b60608201529392505050565b600060208284031215612708578081fd5b5035919050565b600060208284031215612720578081fd5b5051919050565b60008060408385031215612739578182fd5b82359150602083013561224d81613012565b6000806040838503121561275d578182fd5b82359150602083013561224d8161302a565b60008060408385031215612781578182fd5b50508035926020909101359150565b6000806000606084860312156127a4578081fd5b505081359360208301359350604090920135919050565b6000815180845260208085019450808401835b838110156127ea578151875295820195908201906001016127ce565b509495945050505050565b6000815180845261280d816020860160208601612f34565b601f01601f19169290920160200192915050565b60008151835260018060a01b03602083015116602084015260408201516060604085015261285260608501826127f5565b949350505050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b0386811682528516602082015260a0604082018190526000906128b4908301866127bb565b82810360608401526128c681866127bb565b83810360808501526128d881866127f5565b9998505050505050505050565b6001600160a01b039384168152919092166020820152901515604082015260600190565b6001600160a01b03868116825285166020820152604081018490526060810183905260a060808201819052600090612943908301846127f5565b979650505050505050565b6000602080830181845280855180835260408601915060408482028701019250838701855b828110156129a157603f1988860301845261298f858351612821565b94509285019290850190600101612973565b5092979650505050505050565b60006020825261037960208301846127bb565b6000604082526129d460408301856127bb565b82810360208401526129e681856127bb565b95945050505050565b901515815260200190565b60006020825261037960208301846127f5565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b602080825260099082015268111bdb9d081cd95b1b60ba1b604082015260600190565b6020808252600c908201526b48617665207265676973742160a01b604082015260600190565b6020808252600890820152671b9bc81c9a59da1d60c21b604082015260600190565b60208082526009908201526812185908195b99195960ba1b604082015260600190565b6020808252600b908201526a26bab9ba102434b3b432b960a91b604082015260600190565b6020808252602a908201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660408201526930b634b21037bbb732b960b11b606082015260800190565b6020808252602e908201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60408201526d195c881bdc88185c1c1c9bdd995960921b606082015260800190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b602080825260089082015267139bc81c9a59da1d60c21b604082015260600190565b60208082526029908201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604082015268103337b91039b2b63360b91b606082015260800190565b60208082526029908201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604082015268040dad2e6dac2e8c6d60bb1b606082015260800190565b60208082526028908201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206040820152670dad2e6dac2e8c6d60c31b606082015260800190565b60208082526021908201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736040820152607360f81b606082015260800190565b60208082526034908201527f455243313135353a207472616e7366657220746f206e6f6e2d455243313135356040820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b606082015260800190565b90815260200190565b9182526001600160a01b0316602082015260400190565b9283526001600160a01b03919091166020830152604082015260600190565b91825280516020808401919091528101516040808401919091528101516001600160a01b03908116606080850191909152820151608080850191909152909101511660a082015260c00190565b6000838252604060208301526128526040830184612821565b600083825260406020830152825160806040840152612e8760c08401826127f5565b6020850151606085015260018060a01b0360408601511660808501526060850151151560a085015280925050509392505050565b918252602082015260400190565b60405181810167ffffffffffffffff81118282101715612ee857600080fd5b60405291905056","5b600067ffffffffffffffff821115612f06578081fd5b5060209081020190565b600067ffffffffffffffff821115612f26578081fd5b50601f01601f191660200190565b60005b83811015612f4f578181015183820152602001612f37565b83811115612f5e576000848401525b50505050565b60e01c90565b600060443d1015612f7a5761046e565b600481823e6308c379a0612f8e8251612f64565b14612f985761046e565b6040513d600319016004823e80513d67ffffffffffffffff8160248401118184111715612fc8575050505061046e565b82840191508151925080831115612fe2575050505061046e565b503d83016020838301011115612ffa5750505061046e565b601f91909101601f1916810160200160405291505090565b6001600160a01b038116811461302757600080fd5b50565b801515811461302757600080fd5b6001600160e01b03198116811461302757600080fdfea2646970667358221220894d7a1749c31a785627a59735231c8efd4d015f10158344d05838d94a88d5a664736f6c634300060a0033"};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"","","","ff81118282101715612f0057600080fd5b604052919050565b600067ffffffffffffffff821115612f1e578081fd5b5060209081020190565b600067ffffffffffffffff821115612f3e578081fd5b50601f01601f191660200190565b60005b83811015612f67578181015183820152602001612f4f565b83811115612f76576000848401525b50505050565b60e01c90565b600060443d1015612f9257610ccd565b600481823e63c703cb12612fa68251612f7c565b14612fb057610ccd565b6040513d600319016004823e80513d67ffffffffffffffff8160248401118184111715612fe05750505050610ccd565b82840191508151925080831115612ffa5750505050610ccd565b503d8301602083830101111561301257505050610ccd565b601f91909101601f1916810160200160405291505090565b6001600160a01b038116811461303f57600080fd5b50565b801515811461303f57600080fd5b6001600160e01b03198116811461303f57600080fdfea26469706673582212200f78ed7f1bef59325300e3eed40726945c629ff761e27c96513736dde97e943364736f6c634300060a0033"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sto\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ver\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"auctionBegin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"auctionEnd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"auctionNft\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"buyNft\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getNftLife\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"status\",\"type\":\"string\"}],\"internalType\":\"struct NftStorage.ItemLife[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"token_url\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"issueNft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"regiter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"tranferNft\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"choice\",\"type\":\"bool\"}],\"name\":\"upOrDown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC__IMPLEMENTATION = "_implementation";

    public static final String FUNC_AUCTIONBEGIN = "auctionBegin";

    public static final String FUNC_AUCTIONEND = "auctionEnd";

    public static final String FUNC_AUCTIONNFT = "auctionNft";

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_BALANCEOFBATCH = "balanceOfBatch";

    public static final String FUNC_BUYNFT = "buyNft";

    public static final String FUNC_GETBALANCE = "getBalance";

    public static final String FUNC_GETNFTLIFE = "getNftLife";

    public static final String FUNC_ISAPPROVEDFORALL = "isApprovedForAll";

    public static final String FUNC_ISSUENFT = "issueNft";

    public static final String FUNC_REGITER = "regiter";

    public static final String FUNC_SAFEBATCHTRANSFERFROM = "safeBatchTransferFrom";

    public static final String FUNC_SAFETRANSFERFROM = "safeTransferFrom";

    public static final String FUNC_SETAPPROVALFORALL = "setApprovalForAll";

    public static final String FUNC_SUPPORTSINTERFACE = "supportsInterface";

    public static final String FUNC_TRANFERNFT = "tranferNft";

    public static final String FUNC_UPORDOWN = "upOrDown";

    public static final String FUNC_URI = "uri";

    public static final Event APPROVALFORALL_EVENT = new Event("ApprovalForAll", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Bool>() {}));
    ;

    public static final Event TRANSFERBATCH_EVENT = new Event("TransferBatch", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
    ;

    public static final Event TRANSFERSINGLE_EVENT = new Event("TransferSingle", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event URI_EVENT = new Event("URI", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>(true) {}));
    ;

    protected NftMarket(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public List<ApprovalForAllEventResponse> getApprovalForAllEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVALFORALL_EVENT, transactionReceipt);
        ArrayList<ApprovalForAllEventResponse> responses = new ArrayList<ApprovalForAllEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeApprovalForAllEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(APPROVALFORALL_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeApprovalForAllEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(APPROVALFORALL_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<TransferBatchEventResponse> getTransferBatchEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFERBATCH_EVENT, transactionReceipt);
        ArrayList<TransferBatchEventResponse> responses = new ArrayList<TransferBatchEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            TransferBatchEventResponse typedResponse = new TransferBatchEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.from = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.ids = (List<BigInteger>) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.values = (List<BigInteger>) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeTransferBatchEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(TRANSFERBATCH_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeTransferBatchEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(TRANSFERBATCH_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<TransferSingleEventResponse> getTransferSingleEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFERSINGLE_EVENT, transactionReceipt);
        ArrayList<TransferSingleEventResponse> responses = new ArrayList<TransferSingleEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            TransferSingleEventResponse typedResponse = new TransferSingleEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.from = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.id = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeTransferSingleEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(TRANSFERSINGLE_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeTransferSingleEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(TRANSFERSINGLE_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<URIEventResponse> getURIEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(URI_EVENT, transactionReceipt);
        ArrayList<URIEventResponse> responses = new ArrayList<URIEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            URIEventResponse typedResponse = new URIEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.value = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeURIEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(URI_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeURIEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(URI_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public String _implementation() throws ContractException {
        final Function function = new Function(FUNC__IMPLEMENTATION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt auctionBegin(BigInteger id, BigInteger price, BigInteger time) {
        final Function function = new Function(
                FUNC_AUCTIONBEGIN, 
                Arrays.<Type>asList(new Uint256(id),
                new Uint256(price),
                new Uint256(time)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] auctionBegin(BigInteger id, BigInteger price, BigInteger time, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_AUCTIONBEGIN, 
                Arrays.<Type>asList(new Uint256(id),
                new Uint256(price),
                new Uint256(time)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAuctionBegin(BigInteger id, BigInteger price, BigInteger time) {
        final Function function = new Function(
                FUNC_AUCTIONBEGIN, 
                Arrays.<Type>asList(new Uint256(id),
                new Uint256(price),
                new Uint256(time)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<BigInteger, BigInteger, BigInteger> getAuctionBeginInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_AUCTIONBEGIN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<BigInteger, BigInteger, BigInteger>(

                (BigInteger) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue()
                );
    }

    public TransactionReceipt auctionEnd(BigInteger id) {
        final Function function = new Function(
                FUNC_AUCTIONEND, 
                Arrays.<Type>asList(new Uint256(id)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] auctionEnd(BigInteger id, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_AUCTIONEND, 
                Arrays.<Type>asList(new Uint256(id)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAuctionEnd(BigInteger id) {
        final Function function = new Function(
                FUNC_AUCTIONEND, 
                Arrays.<Type>asList(new Uint256(id)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getAuctionEndInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_AUCTIONEND, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt auctionNft(BigInteger id, BigInteger amount) {
        final Function function = new Function(
                FUNC_AUCTIONNFT, 
                Arrays.<Type>asList(new Uint256(id),
                new Uint256(amount)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] auctionNft(BigInteger id, BigInteger amount, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_AUCTIONNFT, 
                Arrays.<Type>asList(new Uint256(id),
                new Uint256(amount)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAuctionNft(BigInteger id, BigInteger amount) {
        final Function function = new Function(
                FUNC_AUCTIONNFT, 
                Arrays.<Type>asList(new Uint256(id),
                new Uint256(amount)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<BigInteger, BigInteger> getAuctionNftInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_AUCTIONNFT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<BigInteger, BigInteger>(

                (BigInteger) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public BigInteger balanceOf(String account, BigInteger id) throws ContractException {
        final Function function = new Function(FUNC_BALANCEOF, 
                Arrays.<Type>asList(new Address(account),
                new Uint256(id)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public List balanceOfBatch(List<String> accounts, List<BigInteger> ids) throws ContractException {
        final Function function = new Function(FUNC_BALANCEOFBATCH, 
                Arrays.<Type>asList(new DynamicArray<Address>(
                org.fisco.bcos.sdk.abi.Utils.typeMap(accounts, Address.class)),
                new DynamicArray<Uint256>(
                org.fisco.bcos.sdk.abi.Utils.typeMap(ids, Uint256.class))),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public TransactionReceipt buyNft(BigInteger id) {
        final Function function = new Function(
                FUNC_BUYNFT, 
                Arrays.<Type>asList(new Uint256(id)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] buyNft(BigInteger id, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_BUYNFT, 
                Arrays.<Type>asList(new Uint256(id)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForBuyNft(BigInteger id) {
        final Function function = new Function(
                FUNC_BUYNFT, 
                Arrays.<Type>asList(new Uint256(id)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getBuyNftInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_BUYNFT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public BigInteger getBalance() throws ContractException {
        final Function function = new Function(FUNC_GETBALANCE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public DynamicArray<NftStorage.ItemLife> getNftLife(BigInteger id) throws ContractException {
        final Function function = new Function(FUNC_GETNFTLIFE, 
                Arrays.<Type>asList(new Uint256(id)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<NftStorage.ItemLife>>() {}));
        return executeCallWithSingleValueReturn(function, DynamicArray.class);
    }

    public Boolean isApprovedForAll(String account, String operator) throws ContractException {
        final Function function = new Function(FUNC_ISAPPROVEDFORALL, 
                Arrays.<Type>asList(new Address(account),
                new Address(operator)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public TransactionReceipt issueNft(String token_url, BigInteger price) {
        final Function function = new Function(
                FUNC_ISSUENFT, 
                Arrays.<Type>asList(new Utf8String(token_url),
                new Uint256(price)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] issueNft(String token_url, BigInteger price, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ISSUENFT, 
                Arrays.<Type>asList(new Utf8String(token_url),
                new Uint256(price)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForIssueNft(String token_url, BigInteger price) {
        final Function function = new Function(
                FUNC_ISSUENFT, 
                Arrays.<Type>asList(new Utf8String(token_url),
                new Uint256(price)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getIssueNftInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ISSUENFT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public Tuple1<BigInteger> getIssueNftOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_ISSUENFT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt regiter() {
        final Function function = new Function(
                FUNC_REGITER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] regiter(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REGITER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRegiter() {
        final Function function = new Function(
                FUNC_REGITER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public TransactionReceipt safeBatchTransferFrom(String from, String to, List<BigInteger> ids, List<BigInteger> amounts, byte[] data) {
        final Function function = new Function(
                FUNC_SAFEBATCHTRANSFERFROM, 
                Arrays.<Type>asList(new Address(from),
                new Address(to),
                new DynamicArray<Uint256>(
                org.fisco.bcos.sdk.abi.Utils.typeMap(ids, Uint256.class)),
                new DynamicArray<Uint256>(
                org.fisco.bcos.sdk.abi.Utils.typeMap(amounts, Uint256.class)),
                new DynamicBytes(data)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] safeBatchTransferFrom(String from, String to, List<BigInteger> ids, List<BigInteger> amounts, byte[] data, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SAFEBATCHTRANSFERFROM, 
                Arrays.<Type>asList(new Address(from),
                new Address(to),
                new DynamicArray<Uint256>(
                org.fisco.bcos.sdk.abi.Utils.typeMap(ids, Uint256.class)),
                new DynamicArray<Uint256>(
                org.fisco.bcos.sdk.abi.Utils.typeMap(amounts, Uint256.class)),
                new DynamicBytes(data)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSafeBatchTransferFrom(String from, String to, List<BigInteger> ids, List<BigInteger> amounts, byte[] data) {
        final Function function = new Function(
                FUNC_SAFEBATCHTRANSFERFROM, 
                Arrays.<Type>asList(new Address(from),
                new Address(to),
                new DynamicArray<Uint256>(
                org.fisco.bcos.sdk.abi.Utils.typeMap(ids, Uint256.class)),
                new DynamicArray<Uint256>(
                org.fisco.bcos.sdk.abi.Utils.typeMap(amounts, Uint256.class)),
                new DynamicBytes(data)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple5<String, String, List<BigInteger>, List<BigInteger>, byte[]> getSafeBatchTransferFromInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SAFEBATCHTRANSFERFROM, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicBytes>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple5<String, String, List<BigInteger>, List<BigInteger>, byte[]>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                convertToNative((List<Uint256>) results.get(2).getValue()), 
                convertToNative((List<Uint256>) results.get(3).getValue()), 
                (byte[]) results.get(4).getValue()
                );
    }

    public TransactionReceipt safeTransferFrom(String from, String to, BigInteger id, BigInteger amount, byte[] data) {
        final Function function = new Function(
                FUNC_SAFETRANSFERFROM, 
                Arrays.<Type>asList(new Address(from),
                new Address(to),
                new Uint256(id),
                new Uint256(amount),
                new DynamicBytes(data)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] safeTransferFrom(String from, String to, BigInteger id, BigInteger amount, byte[] data, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SAFETRANSFERFROM, 
                Arrays.<Type>asList(new Address(from),
                new Address(to),
                new Uint256(id),
                new Uint256(amount),
                new DynamicBytes(data)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSafeTransferFrom(String from, String to, BigInteger id, BigInteger amount, byte[] data) {
        final Function function = new Function(
                FUNC_SAFETRANSFERFROM, 
                Arrays.<Type>asList(new Address(from),
                new Address(to),
                new Uint256(id),
                new Uint256(amount),
                new DynamicBytes(data)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple5<String, String, BigInteger, BigInteger, byte[]> getSafeTransferFromInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SAFETRANSFERFROM, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<DynamicBytes>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple5<String, String, BigInteger, BigInteger, byte[]>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue(), 
                (byte[]) results.get(4).getValue()
                );
    }

    public TransactionReceipt setApprovalForAll(String operator, Boolean approved) {
        final Function function = new Function(
                FUNC_SETAPPROVALFORALL, 
                Arrays.<Type>asList(new Address(operator),
                new Bool(approved)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setApprovalForAll(String operator, Boolean approved, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETAPPROVALFORALL, 
                Arrays.<Type>asList(new Address(operator),
                new Bool(approved)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetApprovalForAll(String operator, Boolean approved) {
        final Function function = new Function(
                FUNC_SETAPPROVALFORALL, 
                Arrays.<Type>asList(new Address(operator),
                new Bool(approved)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, Boolean> getSetApprovalForAllInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETAPPROVALFORALL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, Boolean>(

                (String) results.get(0).getValue(), 
                (Boolean) results.get(1).getValue()
                );
    }

    public Boolean supportsInterface(byte[] interfaceId) throws ContractException {
        final Function function = new Function(FUNC_SUPPORTSINTERFACE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes4(interfaceId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public TransactionReceipt tranferNft(BigInteger id, String to) {
        final Function function = new Function(
                FUNC_TRANFERNFT, 
                Arrays.<Type>asList(new Uint256(id),
                new Address(to)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] tranferNft(BigInteger id, String to, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_TRANFERNFT, 
                Arrays.<Type>asList(new Uint256(id),
                new Address(to)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForTranferNft(BigInteger id, String to) {
        final Function function = new Function(
                FUNC_TRANFERNFT, 
                Arrays.<Type>asList(new Uint256(id),
                new Address(to)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<BigInteger, String> getTranferNftInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_TRANFERNFT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<BigInteger, String>(

                (BigInteger) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public TransactionReceipt upOrDown(BigInteger id, Boolean choice) {
        final Function function = new Function(
                FUNC_UPORDOWN, 
                Arrays.<Type>asList(new Uint256(id),
                new Bool(choice)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] upOrDown(BigInteger id, Boolean choice, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UPORDOWN, 
                Arrays.<Type>asList(new Uint256(id),
                new Bool(choice)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUpOrDown(BigInteger id, Boolean choice) {
        final Function function = new Function(
                FUNC_UPORDOWN, 
                Arrays.<Type>asList(new Uint256(id),
                new Bool(choice)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<BigInteger, Boolean> getUpOrDownInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPORDOWN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<BigInteger, Boolean>(

                (BigInteger) results.get(0).getValue(), 
                (Boolean) results.get(1).getValue()
                );
    }

    public String uri(BigInteger id) throws ContractException {
        final Function function = new Function(FUNC_URI, 
                Arrays.<Type>asList(new Uint256(id)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public static NftMarket load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new NftMarket(contractAddress, client, credential);
    }

    public static NftMarket deploy(Client client, CryptoKeyPair credential, String sto, String ver) throws ContractException {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Address(sto),
                new Address(ver)));
        return deploy(NftMarket.class, client, credential, getBinary(client.getCryptoSuite()), encodedConstructor);
    }



    public static class ApprovalForAllEventResponse {
        public TransactionReceipt.Logs log;

        public String account;

        public String operator;

        public Boolean approved;
    }

    public static class TransferBatchEventResponse {
        public TransactionReceipt.Logs log;

        public String operator;

        public String from;

        public String to;

        public List<BigInteger> ids;

        public List<BigInteger> values;
    }

    public static class TransferSingleEventResponse {
        public TransactionReceipt.Logs log;

        public String operator;

        public String from;

        public String to;

        public BigInteger id;

        public BigInteger value;
    }

    public static class URIEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger id;

        public String value;
    }
}

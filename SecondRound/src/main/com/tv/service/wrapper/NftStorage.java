package tv.service.wrapper;

import org.fisco.bcos.sdk.abi.FunctionEncoder;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.*;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple5;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

@SuppressWarnings("all")
public class NftStorage extends Contract {
    public static final String[] BINARY_ARRAY = {"", "810135610f7a816112b0565b6020840152604081013582811115610f90578485fd5b610f9c88828401610d23565b6040850152505050809150509250929050565b60008060408385031215610fc1578182fd5b82359150602083013567ffffffffffffffff80821115610fdf578283fd5b81850160808188031215610ff1578384fd5b610ffb6080611289565b925080358281111561100b578485fd5b61101788828401610d23565b8452506020810135602084015260408101359150611034826112b0565b604083019190915260600135611049816112c8565b6060820152919491935090915050565b6000806040838503121561106b578182fd5b50508035926020909101359150565b60008151808452815b8181101561109f57602081850181015186830182015201611083565b818111156110b05782602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b0391909116815260200190565b60208082528251828201819052600091906040908185019080840286018301878501865b8381101561115357888303603f19018552815180518452878101516001600160a01b0316888501528681015160608886018190529061113e8287018261107a565b978a01979550505091870191506001016110fd565b509098975050505050505050565b901515815260200190565b6020808252600890820152671b9bc81c9a59da1d60c21b604082015260600190565b81518152602080830151908201526040808301516001600160a01b039081169183019190915260608084015190830152608092830151169181019190915260a00190565b6000602082528251608060208401526111ee60a084018261107a565b6020850151604085015260018060a01b036040860151166060850152606085015115156080850152809250505092915050565b90815260200190565b8381526001600160a01b03831660208201526060604082018190526000906112549083018461107a565b95945050505050565b94855260208501939093526001600160a01b039182166040850152606084015216608082015260a00190565b60405181810167ffffffffffffffff811182821017156112a857600080fd5b604052919050565b6001600160a01b03811681146112c557600080fd5b50565b80151581146112c557600080fdfea26469706673582212208380279043312d41861fbaa3cce2168ae35c627feeba3159cb36d333c5eec96a64736f6c634300060a0033"};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"608060405234801561001057600080fd5b506040516113a33803806113a383398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610082565b600060208284031215610065578081fd5b81516001600160a01b038116811461007b578182fd5b9392505050565b611312806100916000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c80636c2eed031161008c57806392f66cac1161006657806392f66cac1461020c578063b7446e121461021f578063d482f5641461023f578063e77805bb14610252576100ea565b80636c2eed03146101c65780639256e075146101e657806392bdfb85146101f9576100ea565b806329985fd0116100c857806329985fd01461015a57806347c35ddf1461017e5780635c2b43f1146101935780635f32a7a1146101b3576100ea565b8063043af1c6146100ef5780630a0379a11461011857806323416efd14610138575b600080fd5b6101026100fd366004610e33565b610265565b60405161010f91906110df565b60405180910390f35b61012b610126366004610e33565b610385565b60405161010f9190611194565b61014b61014636600461105f565b6103e8565b60405161010f93929190611230565b61016d610168366004610e33565b6104bc565b60405161010f959493929190611263565b61019161018c366004610dc6565b6104f6565b005b6101a66101a1366004610d92565b6105d6565b60405161010f9190611167565b6101916101c1366004610e6e565b610606565b6101d96101d4366004610e33565b6106c9565b60405161010f91906111d8565b6101916101f4366004610f20565b6107ae565b610191610207366004610ea3565b6108bb565b61019161021a366004610dc6565b6109c0565b61023261022d366004610e4b565b610a97565b60405161010f9190611227565b61019161024d366004610fb5565b610abf565b6101a6610260366004610d92565b610bd5565b606060056000838152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b8282101561037a5760008481526020908190206040805160608101825260038602909201805483526001808201546001600160a01b0316848601526002808301805485516101009482161594909402600019011691909104601f81018790048702830187018552808352949592949386019391929091908301828280156103625780601f1061033757610100808354040283529160200191610362565b820191906000526020600020905b81548152906001019060200180831161034557829003601f168201915b5050505050815250508152602001906001019061029a565b505050509050919050565b61038d610c03565b50600090815260066020908152604091829020825160a0810184528154815260018201549281019290925260028101546001600160a01b03908116938301939093526003810154606083015260040154909116608082015290565b6005602052816000526040600020818154811061040157fe5b600091825260209182902060039091020180546001808301546002808501805460408051601f600019978416156101000297909701909216939093049485018890048802810188019092528382529397506001600160a01b03909116955092938301828280156104b25780601f10610487576101008083540402835291602001916104b2565b820191906000526020600020905b81548152906001019060200180831161049557829003601f168201915b5050505050905083565b60066020526000908152604090208054600182015460028301546003840154600490940154929391926001600160a01b0391821692911685565b600054604051630fb5821560e41b81526001600160a01b039091169063fb582150906105269033906004016110cb565b60206040518083038186803b15801561053e57600080fd5b505afa158015610552573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105769190610e10565b61059c57604051636381e58960e11b815260040161059390611172565b60405180910390fd5b6001600160a01b03928316600090815260046020908152604080832094909516825292909252919020805460ff1916911515919091179055565b6001600160a01b0380831660009081526002602090815260408083209385168352929052205460ff165b92915050565b600054604051630fb5821560e41b81526001600160a01b039091169063fb582150906106369033906004016110cb565b60206040518083038186803b15801561064e57600080fd5b505afa158015610662573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106869190610e10565b6106a357604051636381e58960e11b815260040161059390611172565b60009283526001602090815260408085206001600160a01b039094168552929052912055565b6106d1610c44565b6000828152600360209081526040918290208251815460026001821615610100026000190190911604601f8101849004909302810160a09081019094526080810183815290939192849284919084018282801561076f5780601f106107445761010080835404028352916020019161076f565b820191906000526020600020905b81548152906001019060200180831161075257829003601f168201915b5050509183525050600182015460208201526002909101546001600160a01b0381166040830152600160a01b900460ff16151560609091015292915050565b600054604051630fb5821560e41b81526001600160a01b039091169063fb582150906107de9033906004016110cb565b60206040518083038186803b1580156107f657600080fd5b505afa15801561080a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082e9190610e10565b61084b57604051636381e58960e11b815260040161059390611172565b60008281526005602090815260408083208054600180820183559185529383902085516003909502019384558483015190840180546001600160a01b0319166001600160a01b0390921691909117905583015180518493926108b4926002850192910190610c77565b5050505050565b600054604051630fb5821560e41b81526001600160a01b039091169063fb582150906108eb9033906004016110cb565b60206040518083038186803b15801561090357600080fd5b505afa158015610917573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061093b9190610e10565b61095857604051636381e58960e11b815260040161059390611172565b60009182526006602090815260409283902082518155908201516001820155918101516002830180546001600160a01b03199081166001600160a01b039384161790915560608301516003850155608090920151600490930180549092169216919091179055565b600054604051630fb5821560e41b81526001600160a01b039091169063fb582150906109f09033906004016110cb565b60206040518083038186803b158015610a0857600080fd5b505afa158015610a1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a409190610e10565b610a5d57604051636381e58960e11b815260040161059390611172565b6001600160a01b03928316600090815260026020908152604080832094909516825292909252919020805460ff1916911515919091179055565b60009182526001602090815260408084206001600160a01b0393909316845291905290205490565b600054604051630fb5821560e41b81526001600160a01b039091169063fb58215090610aef9033906004016110cb565b60206040518083038186803b158015610b0757600080fd5b505afa158015610b1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b3f9190610e10565b610b5c57604051636381e58960e11b815260040161059390611172565b6000828152600360209081526040909120825180518493610b81928492910190610c77565b50602082015160018201556040820151600290910180546060909301511515600160a01b0260ff60a01b196001600160a01b039093166001600160a01b031990941693909317919091169190911790555050565b6001600160a01b03918216600090815260046020908152604080832093909416825291909152205460ff1690565b6040518060a00160405280600081526020016000815260200160006001600160a01b031681526020016000815260200160006001600160a01b031681525090565b6040518060800160405280606081526020016000815260200160006001600160a01b031681526020016000151581525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610cb857805160ff1916838001178555610ce5565b82800160010185558215610ce5579182015b82811115610ce5578251825591602001919060010190610cca565b50610cf1929150610cf5565b5090565b610d0f91905b80821115610cf15760008155600101610cfb565b90565b80356001600160a01b038116811461060057600080fd5b600082601f830112610d39578081fd5b813567ffffffffffffffff811115610d4f578182fd5b610d62601f8201601f191660200161128f565b9150808252836020828501011115610d7957600080fd5b8060208401602084013760009082016020015292915050565b60008060408385031215610da4578182fd5b610dae8484610d12565b9150610dbd8460208501610d12565b90509250929050565b600080600060608486031215610dda578081fd5b8335610de5816112b6565b92506020840135610df5816112b6565b91506040840135610e05816112ce565b809150509250925092565b600060208284031215610e21578081fd5b8151610e2c816112ce565b9392505050565b600060208284031215610e44578081fd5b5035919050565b60008060408385031215610e5d578182fd5b82359150610dbd8460208501610d12565b600080600060608486031215610e82578283fd5b83359250610e938560208601610d12565b9150604084013590509250925092565b60008082840360c0811215610eb6578283fd5b8335925060a0601f1982011215610ecb578182fd5b50610ed660a061128f565b6020840135815260408401356020820152610ef48560608601610d12565b604082015260808401356060820152610f108560a08601610d12565b6080820152809150509250929050565b60008060408385031215610f32578182fd5b82359150602083013567ffffffffffffffff80821115610f50578283fd5b81850160608188031215610f62578384fd5b610f6c606061128f565b9250", "803583526020810135610f80816112b6565b6020840152604081013582811115610f96578485fd5b610fa288828401610d29565b6040850152505050809150509250929050565b60008060408385031215610fc7578182fd5b82359150602083013567ffffffffffffffff80821115610fe5578283fd5b81850160808188031215610ff7578384fd5b611001608061128f565b9250803582811115611011578485fd5b61101d88828401610d29565b845250602081013560208401526040810135915061103a826112b6565b60408301919091526060013561104f816112ce565b6060820152919491935090915050565b60008060408385031215611071578182fd5b50508035926020909101359150565b60008151808452815b818110156110a557602081850181015186830182015201611089565b818111156110b65782602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b0391909116815260200190565b60208082528251828201819052600091906040908185019080840286018301878501865b8381101561115957888303603f19018552815180518452878101516001600160a01b0316888501528681015160608886018190529061114482870182611080565b978a0197955050509187019150600101611103565b509098975050505050505050565b901515815260200190565b6020808252600890820152671b9bc81c9a59da1d60c21b604082015260600190565b81518152602080830151908201526040808301516001600160a01b039081169183019190915260608084015190830152608092830151169181019190915260a00190565b6000602082528251608060208401526111f460a0840182611080565b6020850151604085015260018060a01b036040860151166060850152606085015115156080850152809250505092915050565b90815260200190565b8381526001600160a01b038316602082015260606040820181905260009061125a90830184611080565b95945050505050565b94855260208501939093526001600160a01b039182166040850152606084015216608082015260a00190565b60405181810167ffffffffffffffff811182821017156112ae57600080fd5b604052919050565b6001600160a01b03811681146112cb57600080fd5b50565b80151581146112cb57600080fdfea2646970667358221220a406839cc16b858098cfc32a06fb4231f2839479c043b3f0fbfdc23292ce515d64736f6c634300060a0033"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"veri\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"addr1\",\"type\":\"address\"}],\"name\":\"getApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getAuction\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"highestBid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"highestBidder\",\"type\":\"address\"}],\"internalType\":\"struct NftStorage.Auction\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"addr1\",\"type\":\"address\"}],\"name\":\"getConnection\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getLifes\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"status\",\"type\":\"string\"}],\"internalType\":\"struct NftStorage.ItemLife[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getTokens\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"token_url\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"could_sold\",\"type\":\"bool\"}],\"internalType\":\"struct NftStorage.Token\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lifes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"status\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"addr1\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"bo\",\"type\":\"bool\"}],\"name\":\"setApproval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"highestBid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"highestBidder\",\"type\":\"address\"}],\"internalType\":\"struct NftStorage.Auction\",\"name\":\"auc\",\"type\":\"tuple\"}],\"name\":\"setAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setBalances\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"addr1\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"bo\",\"type\":\"bool\"}],\"name\":\"setConnection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"status\",\"type\":\"string\"}],\"internalType\":\"struct NftStorage.ItemLife\",\"name\":\"lif\",\"type\":\"tuple\"}],\"name\":\"setLifes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"token_url\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"could_sold\",\"type\":\"bool\"}],\"internalType\":\"struct NftStorage.Token\",\"name\":\"tok\",\"type\":\"tuple\"}],\"name\":\"setTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenAuction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"highestBid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"highestBidder\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_GETAPPROVAL = "getApproval";

    public static final String FUNC_GETAUCTION = "getAuction";

    public static final String FUNC_GETBALANCES = "getBalances";

    public static final String FUNC_GETCONNECTION = "getConnection";

    public static final String FUNC_GETLIFES = "getLifes";

    public static final String FUNC_GETTOKENS = "getTokens";

    public static final String FUNC_LIFES = "lifes";

    public static final String FUNC_SETAPPROVAL = "setApproval";

    public static final String FUNC_SETAUCTION = "setAuction";

    public static final String FUNC_SETBALANCES = "setBalances";

    public static final String FUNC_SETCONNECTION = "setConnection";

    public static final String FUNC_SETLIFES = "setLifes";

    public static final String FUNC_SETTOKENS = "setTokens";

    public static final String FUNC_TOKENAUCTION = "tokenAuction";

    protected NftStorage(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public static NftStorage load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new NftStorage(contractAddress, client, credential);
    }

    public static NftStorage deploy(Client client, CryptoKeyPair credential, String veri) throws ContractException {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Address(veri)));
        return deploy(NftStorage.class, client, credential, getBinary(client.getCryptoSuite()), encodedConstructor);
    }

    public Boolean getApproval(String addr, String addr1) throws ContractException {
        final Function function = new Function(FUNC_GETAPPROVAL,
                Arrays.<Type>asList(new Address(addr),
                        new Address(addr1)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {
                }));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public NftStorage.Auction getAuction(BigInteger id) throws ContractException {
        final Function function = new Function(FUNC_GETAUCTION,
                Arrays.<Type>asList(new Uint256(id)),
                Arrays.<TypeReference<?>>asList(new TypeReference<NftStorage.Auction>() {
                }));
        return executeCallWithSingleValueReturn(function, NftStorage.Auction.class);
    }

    public BigInteger getBalances(BigInteger id, String addr) throws ContractException {
        final Function function = new Function(FUNC_GETBALANCES,
                Arrays.<Type>asList(new Uint256(id),
                        new Address(addr)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
                }));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public Boolean getConnection(String addr, String addr1) throws ContractException {
        final Function function = new Function(FUNC_GETCONNECTION,
                Arrays.<Type>asList(new Address(addr),
                        new Address(addr1)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {
                }));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public DynamicArray<NftStorage.ItemLife> getLifes(BigInteger id) throws ContractException {
        final Function function = new Function(FUNC_GETLIFES,
                Arrays.<Type>asList(new Uint256(id)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<NftStorage.ItemLife>>() {
                }));
        return executeCallWithSingleValueReturn(function, DynamicArray.class);
    }

    public NftStorage.Token getTokens(BigInteger id) throws ContractException {
        final Function function = new Function(FUNC_GETTOKENS,
                Arrays.<Type>asList(new Uint256(id)),
                Arrays.<TypeReference<?>>asList(new TypeReference<NftStorage.Token>() {
                }));
        return executeCallWithSingleValueReturn(function, NftStorage.Token.class);
    }

    public Tuple3<BigInteger, String, String> lifes(BigInteger param0, BigInteger param1) throws ContractException {
        final Function function = new Function(FUNC_LIFES,
                Arrays.<Type>asList(new Uint256(param0),
                        new Uint256(param1)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
                }, new TypeReference<Address>() {
                }, new TypeReference<Utf8String>() {
                }));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple3<BigInteger, String, String>(
                (BigInteger) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (String) results.get(2).getValue());
    }

    public TransactionReceipt setApproval(String addr, String addr1, Boolean bo) {
        final Function function = new Function(
                FUNC_SETAPPROVAL,
                Arrays.<Type>asList(new Address(addr),
                        new Address(addr1),
                        new Bool(bo)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setApproval(String addr, String addr1, Boolean bo, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETAPPROVAL,
                Arrays.<Type>asList(new Address(addr),
                        new Address(addr1),
                        new Bool(bo)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetApproval(String addr, String addr1, Boolean bo) {
        final Function function = new Function(
                FUNC_SETAPPROVAL,
                Arrays.<Type>asList(new Address(addr),
                        new Address(addr1),
                        new Bool(bo)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, Boolean> getSetApprovalInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETAPPROVAL,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {
                }, new TypeReference<Address>() {
                }, new TypeReference<Bool>() {
                }));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, Boolean>(

                (String) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (Boolean) results.get(2).getValue()
        );
    }

    public TransactionReceipt setAuction(BigInteger id, NftStorage.Auction auc) {
        final Function function = new Function(
                FUNC_SETAUCTION,
                Arrays.<Type>asList(new Uint256(id),
                        auc),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setAuction(BigInteger id, NftStorage.Auction auc, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETAUCTION,
                Arrays.<Type>asList(new Uint256(id),
                        auc),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetAuction(BigInteger id, NftStorage.Auction auc) {
        final Function function = new Function(
                FUNC_SETAUCTION,
                Arrays.<Type>asList(new Uint256(id),
                        auc),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<BigInteger, NftStorage.Auction> getSetAuctionInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETAUCTION,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
                }, new TypeReference<NftStorage.Auction>() {
                }));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<BigInteger, NftStorage.Auction>(

                (BigInteger) results.get(0).getValue(),
                (NftStorage.Auction) results.get(1)
        );
    }

    public TransactionReceipt setBalances(BigInteger id, String addr, BigInteger amount) {
        final Function function = new Function(
                FUNC_SETBALANCES,
                Arrays.<Type>asList(new Uint256(id),
                        new Address(addr),
                        new Uint256(amount)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setBalances(BigInteger id, String addr, BigInteger amount, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETBALANCES,
                Arrays.<Type>asList(new Uint256(id),
                        new Address(addr),
                        new Uint256(amount)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetBalances(BigInteger id, String addr, BigInteger amount) {
        final Function function = new Function(
                FUNC_SETBALANCES,
                Arrays.<Type>asList(new Uint256(id),
                        new Address(addr),
                        new Uint256(amount)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<BigInteger, String, BigInteger> getSetBalancesInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETBALANCES,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
                }, new TypeReference<Address>() {
                }, new TypeReference<Uint256>() {
                }));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<BigInteger, String, BigInteger>(

                (BigInteger) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (BigInteger) results.get(2).getValue()
        );
    }

    public TransactionReceipt setConnection(String addr, String addr1, Boolean bo) {
        final Function function = new Function(
                FUNC_SETCONNECTION,
                Arrays.<Type>asList(new Address(addr),
                        new Address(addr1),
                        new Bool(bo)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setConnection(String addr, String addr1, Boolean bo, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETCONNECTION,
                Arrays.<Type>asList(new Address(addr),
                        new Address(addr1),
                        new Bool(bo)),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetConnection(String addr, String addr1, Boolean bo) {
        final Function function = new Function(
                FUNC_SETCONNECTION,
                Arrays.<Type>asList(new Address(addr),
                        new Address(addr1),
                        new Bool(bo)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, Boolean> getSetConnectionInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETCONNECTION,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {
                }, new TypeReference<Address>() {
                }, new TypeReference<Bool>() {
                }));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, Boolean>(

                (String) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (Boolean) results.get(2).getValue()
        );
    }

    public TransactionReceipt setLifes(BigInteger id, NftStorage.ItemLife lif) {
        final Function function = new Function(
                FUNC_SETLIFES,
                Arrays.<Type>asList(new Uint256(id),
                        lif),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setLifes(BigInteger id, NftStorage.ItemLife lif, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETLIFES,
                Arrays.<Type>asList(new Uint256(id),
                        lif),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetLifes(BigInteger id, NftStorage.ItemLife lif) {
        final Function function = new Function(
                FUNC_SETLIFES,
                Arrays.<Type>asList(new Uint256(id),
                        lif),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<BigInteger, NftStorage.ItemLife> getSetLifesInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETLIFES,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
                }, new TypeReference<NftStorage.ItemLife>() {
                }));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<BigInteger, NftStorage.ItemLife>(

                (BigInteger) results.get(0).getValue(),
                (NftStorage.ItemLife) results.get(1)
        );
    }

    public TransactionReceipt setTokens(BigInteger id, NftStorage.Token tok) {
        final Function function = new Function(
                FUNC_SETTOKENS,
                Arrays.<Type>asList(new Uint256(id),
                        tok),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public byte[] setTokens(BigInteger id, NftStorage.Token tok, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETTOKENS,
                Arrays.<Type>asList(new Uint256(id),
                        tok),
                Collections.<TypeReference<?>>emptyList());
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetTokens(BigInteger id, NftStorage.Token tok) {
        final Function function = new Function(
                FUNC_SETTOKENS,
                Arrays.<Type>asList(new Uint256(id),
                        tok),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<BigInteger, NftStorage.Token> getSetTokensInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETTOKENS,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
                }, new TypeReference<NftStorage.Token>() {
                }));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<BigInteger, NftStorage.Token>(

                (BigInteger) results.get(0).getValue(),
                (NftStorage.Token) results.get(1)
        );
    }

    public Tuple5<BigInteger, BigInteger, String, BigInteger, String> tokenAuction(BigInteger param0) throws ContractException {
        final Function function = new Function(FUNC_TOKENAUCTION,
                Arrays.<Type>asList(new Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
                }, new TypeReference<Uint256>() {
                }, new TypeReference<Address>() {
                }, new TypeReference<Uint256>() {
                }, new TypeReference<Address>() {
                }));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple5<BigInteger, BigInteger, String, BigInteger, String>(
                (BigInteger) results.get(0).getValue(),
                (BigInteger) results.get(1).getValue(),
                (String) results.get(2).getValue(),
                (BigInteger) results.get(3).getValue(),
                (String) results.get(4).getValue());
    }

    public static class Auction extends StaticStruct {
        public BigInteger startTime;

        public BigInteger endTime;

        public String owner;

        public BigInteger highestBid;

        public String highestBidder;

        public Auction(Uint256 startTime, Uint256 endTime, Address owner, Uint256 highestBid, Address highestBidder) {
            super(startTime, endTime, owner, highestBid, highestBidder);
            this.startTime = startTime.getValue();
            this.endTime = endTime.getValue();
            this.owner = owner.getValue();
            this.highestBid = highestBid.getValue();
            this.highestBidder = highestBidder.getValue();
        }

        public Auction(BigInteger startTime, BigInteger endTime, String owner, BigInteger highestBid, String highestBidder) {
            super(new Uint256(startTime), new Uint256(endTime), new Address(owner), new Uint256(highestBid), new Address(highestBidder));
            this.startTime = startTime;
            this.endTime = endTime;
            this.owner = owner;
            this.highestBid = highestBid;
            this.highestBidder = highestBidder;
        }
    }

    public static class ItemLife extends DynamicStruct {
        public BigInteger date;

        public String owner;

        public String status;

        public ItemLife(Uint256 date, Address owner, Utf8String status) {
            super(date, owner, status);
            this.date = date.getValue();
            this.owner = owner.getValue();
            this.status = status.getValue();
        }

        public ItemLife(BigInteger date, String owner, String status) {
            super(new Uint256(date), new Address(owner), new Utf8String(status));
            this.date = date;
            this.owner = owner;
            this.status = status;
        }
    }

    public static class Token extends DynamicStruct {
        public String token_url;

        public BigInteger price;

        public String owner;

        public Boolean could_sold;

        public Token(Utf8String token_url, Uint256 price, Address owner, Bool could_sold) {
            super(token_url, price, owner, could_sold);
            this.token_url = token_url.getValue();
            this.price = price.getValue();
            this.owner = owner.getValue();
            this.could_sold = could_sold.getValue();
        }

        public Token(String token_url, BigInteger price, String owner, Boolean could_sold) {
            super(new Utf8String(token_url), new Uint256(price), new Address(owner), new Bool(could_sold));
            this.token_url = token_url;
            this.price = price;
            this.owner = owner;
            this.could_sold = could_sold;
        }
    }
}
